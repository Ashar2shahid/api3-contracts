{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/ITimelockManager.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\n\ninterface ITimelockManager {\n    event Api3PoolUpdated(address api3PoolAddress);\n\n    event TransferredAndLocked(\n        uint256 indexed timelockInd,\n        address source,\n        address indexed owner,\n        uint256 amount,\n        uint256 releaseTime,\n        bool reversible\n    );\n\n    function updateApi3Pool(address api3PoolAddress)\n        external;\n\n    function transferAndLock(\n        address source,\n        address owner,\n        uint256 amount,\n        uint256 releaseTime,\n        bool reversible\n        )\n        external;\n\n    function transferAndLockMultiple(\n        address source,\n        address[] calldata owners,\n        uint256[] calldata amounts,\n        uint256[] calldata releaseTimes,\n        bool[] calldata reversibles\n        )\n        external;\n\n    function reverseTimelock(\n        uint256 indTimelock,\n        address destination\n        )\n        external;\n\n    function reverseTimelockMultiple(\n        uint256[] calldata indTimelocks,\n        address destination\n        )\n        external;\n\n    function withdraw(\n        uint256 indTimelock,\n        address destination\n        )\n        external;\n\n    function withdrawToPool(\n        uint256 indTimelock,\n        address api3PoolAddress,\n        address beneficiary\n        )\n        external;\n\n    function getTimelock(uint256 indTimelock)\n        external\n        view\n        returns (\n            address owner,\n            uint256 amount,\n            uint256 releaseTime,\n            bool reversibles\n            );\n\n    function getTimelocks()\n        external\n        view\n        returns (\n            address[] memory owners,\n            uint256[] memory amounts,\n            uint256[] memory releaseTimes,\n            bool[] memory reversibles\n            );\n}"
    },
    "contracts/TimelockManager.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@api3-contracts/api3-token/contracts/interfaces/IApi3Token.sol\";\nimport \"@api3-contracts/api3-pool/contracts/interfaces/IApi3Pool.sol\";\nimport \"./interfaces/ITimelockManager.sol\";\n\n\n/// @title Contract that timelocks API3 tokens sent to it until the vesting\n/// period is over or the staking pool is operational\n/// @notice The owner of TimelockManager (i.e., API3 DAO) can send tokens to\n/// TimelockManager to be timelocked until releaseTime. After releaseTime, the\n/// respective owner can withdraw the tokens.\n/// Alternatively, if the owner of this contract sets api3Pool, the token\n/// owners can transfer their tokens from TimelockManager to api3Pool before\n/// releaseTime. These tokens will be not be withdrawable from api3Pool until\n/// their respective releaseTimes.\ncontract TimelockManager is Ownable, ITimelockManager {\n    using SafeMath for uint256;\n\n    struct Timelock {\n        address owner;\n        uint256 amount;\n        uint256 releaseTime;\n        bool reversible;\n        }\n\n    IApi3Token public immutable api3Token;\n    IApi3Pool public api3Pool;\n    mapping(uint256 => Timelock) public timelocks;\n    uint256 public noTimelocks = 0;\n\n    /// @dev api3Pool is not initialized in the constructor because this\n    /// contract will be deployed before api3Pool\n    /// @param api3TokenAddress Address of the API3 token contract\n    /// @param timelockManagerOwner Address that will receive the ownership of\n    /// the TimelockManager contract (i.e., the API3 DAO)\n    constructor(\n        address api3TokenAddress,\n        address timelockManagerOwner\n        )\n        public\n    {\n        api3Token = IApi3Token(api3TokenAddress);\n        transferOwnership(timelockManagerOwner);\n    }\n\n    /// @notice Allows the owner (i.e., API3 DAO) to set the address of\n    /// api3Pool, which token owners can transfer their tokens to\n    /// @param api3PoolAddress Address of the API3 pool contract\n    function updateApi3Pool(address api3PoolAddress)\n        external\n        override\n        onlyOwner\n    {\n        api3Pool = IApi3Pool(api3PoolAddress);\n        emit Api3PoolUpdated(api3PoolAddress);\n    }\n\n    /// @notice Transfers amount number of API3 tokens to this contract to be\n    /// received by their owner after releaseTime\n    /// @dev source needs to approve() this contract to transfer amount number\n    /// of tokens beforehand.\n    /// This method is put behind onlyOwner to prevent third parties from\n    /// spamming timelocks (not an actual issue but it would be inconvenient\n    /// to sift through).\n    /// @param source Source of tokens\n    /// @param owner Owner of tokens\n    /// @param amount Amount of tokens\n    /// @param releaseTime Release time\n    /// @param reversible Flag indicating if the timelock is reversible\n    function transferAndLock(\n        address source,\n        address owner,\n        uint256 amount,\n        uint256 releaseTime,\n        bool reversible\n        )\n        public\n        override\n        onlyOwner\n    {\n        require(amount != 0, \"Transferred and locked amount cannot be 0\");\n        timelocks[noTimelocks] = Timelock({\n            owner: owner,\n            amount: amount,\n            releaseTime: releaseTime,\n            reversible: reversible\n            });\n        emit TransferredAndLocked(\n            noTimelocks,\n            source,\n            owner,\n            amount,\n            releaseTime,\n            reversible\n            );\n        noTimelocks = noTimelocks.add(1);\n        api3Token.transferFrom(source, address(this), amount);\n    }\n\n    /// @notice Convenience function that calls transferAndLock() multiple times\n    /// @dev source is expected to be a single address, i.e., the DAO\n    /// @param source Source of tokens\n    /// @param owners Array of owners of tokens\n    /// @param amounts Array of amounts of tokens\n    /// @param releaseTimes Array of release times\n    /// @param reversibles Array of flags indicating if the timelocks are\n    /// reversible\n    function transferAndLockMultiple(\n        address source,\n        address[] calldata owners,\n        uint256[] calldata amounts,\n        uint256[] calldata releaseTimes,\n        bool[] calldata reversibles\n        )\n        external\n        override\n        onlyOwner\n    {\n        require(\n            owners.length == amounts.length\n                && owners.length == releaseTimes.length\n                && owners.length == reversibles.length,\n            \"Lengths of parameters do not match\"\n            );\n        // 30 elements cost slightly more than 3,000,000 in gas\n        require(\n            owners.length <= 30,\n            \"Parameters are longer than 30\"\n            );\n        for (uint256 ind = 0; ind < owners.length; ind++)\n        {\n            transferAndLock(source, owners[ind], amounts[ind], releaseTimes[ind], reversibles[ind]);\n        }\n    }\n\n    /// @notice Cancels the timelock and sends the locked tokens to destination\n    /// @dev The reversible field of the timelock must be true\n    /// @param indTimelock Index of the timelock to be reversed\n    /// @param destination Address that will receive the tokens\n    function reverseTimelock(\n        uint256 indTimelock,\n        address destination\n        )\n        public\n        override\n        onlyOwner\n    {\n        require(\n            indTimelock < noTimelocks,\n            \"No such timelock exists\"\n            );\n        require(\n            destination != address(0),\n            \"Cannot withdraw to address 0\"\n            );\n        Timelock memory timelock = timelocks[indTimelock];\n        require(\n            timelock.reversible,\n            \"Timelock is not reversible\"\n            );\n        require(\n            timelock.amount != 0,\n            \"Timelock is already withdrawn\"\n            );\n        // Do not check if msg.sender is the timelock owner\n        // Do not check if the timelock has matured\n        delete timelocks[indTimelock].amount;\n        api3Token.transfer(destination, timelock.amount);\n    }\n\n    /// @notice Convenience function that calls reverseTimelock() multiple times\n    /// @dev destination is expected to be a single address, i.e., the DAO\n    /// @param indTimelocks Array of indices of timelocks to be reversed\n    /// @param destination Address that will receive the tokens\n    function reverseTimelockMultiple(\n        uint256[] calldata indTimelocks,\n        address destination\n        )\n        external\n        override\n        onlyOwner\n    {\n        // Use the same limit as transferAndLockMultiple() for consistency\n        require(\n            indTimelocks.length <= 30,\n            \"Parameters are longer than 30\"\n            );\n        for (uint256 ind = 0; ind < indTimelocks.length; ind++)\n        {\n            reverseTimelock(indTimelocks[ind], destination);\n        }\n    }\n\n    /// @notice Used by the owner to withdraw tokens kept by a specific\n    /// timelock\n    /// @param indTimelock Index of the timelock to be withdrawn from\n    /// @param destination Address that will receive the tokens\n    function withdraw(\n        uint256 indTimelock,\n        address destination\n        )\n        external\n        override\n    {\n        require(\n            indTimelock < noTimelocks,\n            \"No such timelock exists\"\n            );\n        require(\n            destination != address(0),\n            \"Cannot withdraw to address 0\"\n            );\n        Timelock memory timelock = timelocks[indTimelock];\n        require(\n            timelock.amount != 0,\n            \"Timelock is already withdrawn\"\n            );\n        require(\n            msg.sender == timelock.owner,\n            \"Only the owner of the timelock can withdraw from it\"\n            );\n        require(\n            now > timelock.releaseTime,\n            \"Timelock has not matured yet\"\n            );\n        delete timelocks[indTimelock].amount;\n        api3Token.transfer(destination, timelock.amount);\n    }\n\n    /// @notice Used by the owner to withdraw their tokens kept by a specific\n    /// timelock to the API3 pool\n    /// @dev We ask the user to provide api3PoolAddress as a form of\n    /// verification, i.e., the user confirms that the API3 pool address set at\n    /// this contract is correct\n    /// @param indTimelock Index of the timelock to be withdrawn from\n    /// @param api3PoolAddress Address of the API3 pool contract\n    /// @param beneficiary Address that the tokens will be deposited to the\n    /// pool contract on behalf of\n    function withdrawToPool(\n        uint256 indTimelock,\n        address api3PoolAddress,\n        address beneficiary\n        )\n        external\n        override\n    {\n        require(\n            indTimelock < noTimelocks,\n            \"No such timelock exists\"\n            );\n        require(\n            beneficiary != address(0),\n            \"Cannot withdraw to benefit address 0\"\n            );\n        require(address(api3Pool) != address(0), \"API3 pool not set yet\");\n        require(\n            address(api3Pool) == api3PoolAddress,\n            \"API3 pool addresses do not match\"\n            );\n        Timelock memory timelock = timelocks[indTimelock];\n        require(\n            timelock.amount != 0,\n            \"Timelock is already withdrawn\"\n            );\n        require(\n            msg.sender == timelock.owner,\n            \"Only the owner of the timelock can withdraw from it\"\n            );\n        // We deliberately skip checking for timelock maturity\n        delete timelocks[indTimelock].amount;\n        api3Token.approve(address(api3Pool), timelock.amount);\n        // If (now > timelock.releaseTime), the beneficiary can immediately\n        // have their tokens vested at the pool with an additional transaction\n        api3Pool.depositWithVesting(\n            address(this),\n            timelock.amount,\n            beneficiary,\n            api3Pool.getEpochIndex(timelock.releaseTime)\n            );\n    }\n\n    /// @notice Returns the details of a timelock\n    /// @return owner Owner of tokens\n    /// @return amount Amount of tokens\n    /// @return releaseTime Release time\n    /// @return reversible Flag indicating if the timelock is reversible\n    function getTimelock(uint256 indTimelock)\n        external\n        view\n        override\n        returns (\n            address owner,\n            uint256 amount,\n            uint256 releaseTime,\n            bool reversible\n            )\n    {\n        Timelock storage timelock = timelocks[indTimelock];\n        owner = timelock.owner;\n        amount = timelock.amount;\n        releaseTime = timelock.releaseTime;\n        reversible = timelock.reversible;\n    }\n\n    /// @notice Returns the details of all timelocks\n    /// @dev This is a convenience method for the user to be able to retrieve\n    /// all timelocks with a single call and loop through them to find the\n    /// timelocks they are looking for. In case timelocks grow too large and\n    /// this method starts reverting (not expected), the user can go through\n    /// the events emitted during locking, or even go through individual\n    /// indices using getTimelock().\n    /// @return owners Owners of tokens\n    /// @return amounts Amounts of tokens\n    /// @return releaseTimes Release times\n    /// @return reversibles Array of flags indicating if the timelocks are\n    /// reversible\n    function getTimelocks()\n        external\n        view\n        override\n        returns (\n            address[] memory owners,\n            uint256[] memory amounts,\n            uint256[] memory releaseTimes,\n            bool[] memory reversibles\n            )\n    {\n        owners = new address[](noTimelocks);\n        amounts = new uint256[](noTimelocks);\n        releaseTimes = new uint256[](noTimelocks);\n        reversibles = new bool[](noTimelocks);\n        for (uint256 ind = 0; ind < noTimelocks; ind++)\n        {\n            Timelock storage timelock = timelocks[ind];\n            owners[ind] = timelock.owner;\n            amounts[ind] = timelock.amount;\n            releaseTimes[ind] = timelock.releaseTime;\n            reversibles[ind] = timelock.reversible;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../GSN/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/GSN/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@api3-contracts/api3-token/contracts/interfaces/IApi3Token.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n\ninterface IApi3Token is IERC20 {\n    event MinterStatusUpdated(\n        address indexed minterAddress,\n        bool minterStatus\n        );\n\n    function updateMinterStatus(\n        address minterAddress,\n        bool minterStatus\n        )\n        external;\n\n    function mint(\n        address account,\n        uint256 amount\n        )\n        external;\n\n    function getMinterStatus(address minterAddress)\n        external\n        view\n        returns(bool minterStatus);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@api3-contracts/api3-pool/contracts/interfaces/IApi3Pool.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"./ITransferUtils.sol\";\n\n\ninterface IApi3Pool is ITransferUtils {}\n"
    },
    "@api3-contracts/api3-pool/contracts/interfaces/ITransferUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"./IPoolUtils.sol\";\n\n\ninterface ITransferUtils is IPoolUtils {\n    event Deposited(\n        address indexed sourceAddress,\n        uint256 amount,\n        address indexed userAddress\n        );\n    \n    event DepositedWithVesting(\n        address indexed sourceAddress,\n        uint256 amount,\n        address indexed userAddress,\n        uint256 vestingEpoch\n        );\n    \n    event Withdrawn(\n        address indexed userAddress,\n        address destinationAddress,\n        uint256 amount\n        );\n    \n    event AddedVestedRewards(\n        address indexed sourceAddress,\n        uint256 amount,\n        uint256 indexed epochIndex\n        );\n    \n    event AddedInstantRewards(\n        address indexed sourceAddress,\n        uint256 amount,\n        uint256 indexed epochIndex\n        );\n\n    function deposit(\n        address sourceAddress,\n        uint256 amount,\n        address userAddress\n        )\n        external;\n\n    function depositWithVesting(\n        address sourceAddress,\n        uint256 amount,\n        address userAddress,\n        uint256 vestingEpoch\n        )\n        external;\n\n    function withdraw(\n        address destinationAddress,\n        uint256 amount\n        )\n        external;\n\n    function addVestedRewards(\n        address sourceAddress,\n        uint256 amount\n        )\n        external;\n\n    function addInstantRewards(\n        address sourceAddress,\n        uint256 amount\n        )\n        external;\n}\n"
    },
    "@api3-contracts/api3-pool/contracts/interfaces/IPoolUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"./IStakeUtils.sol\";\n\n\ninterface IPoolUtils is IStakeUtils {\n    event Pooled(\n        address indexed userAddress,\n        uint256 amount,\n        uint256 amountInShares\n        );\n    \n    event RequestedToUnpool(address indexed userAddress);\n\n    event Unpooled(\n        address indexed userAddress,\n        uint256 amount,\n        uint256 amountInShares\n    );\n\n    function pool(uint256 amount)\n        external;\n\n    function requestToUnpool()\n        external;\n\n    function unpool(uint256 amountInShares)\n        external;\n}\n"
    },
    "@api3-contracts/api3-pool/contracts/interfaces/IStakeUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"./IVestingUtils.sol\";\n\n\ninterface IStakeUtils is IVestingUtils {\n    event Staked(\n        address indexed userAddress,\n        uint256 amountInShares\n        );\n    \n    event UpdatedDelegate(\n        address indexed userAddress,\n        address indexed delegate\n        );\n\n    event Collected(\n        address indexed userAddress,\n        uint256 vestedRewards,\n        uint256 instantRewards\n        );\n\n    function stake(address userAddress)\n        external;\n\n    function updateDelegate(address delegate)\n        external;\n\n    function collect(address userAddress)\n        external;\n}\n"
    },
    "@api3-contracts/api3-pool/contracts/interfaces/IVestingUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"./IIouUtils.sol\";\n\n\ninterface IVestingUtils is IIouUtils {\n    event VestingCreated(\n        bytes32 indexed vestingId,\n        address indexed userAddress,\n        uint256 amount,\n        uint256 vestingEpoch\n        );\n\n    event VestingResolved(bytes32 indexed vestingId);\n\n    function vest(bytes32 vestingId)\n        external;\n}\n"
    },
    "@api3-contracts/api3-pool/contracts/interfaces/IIouUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"./IApi3State.sol\";\nimport \"./IClaimUtils.sol\";\n\n\ninterface IIouUtils is IClaimUtils {\n    event IouCreated(\n        bytes32 indexed iouId,\n        address indexed userAddress,\n        uint256 amountInShares,\n        bytes32 indexed claimId,\n        IApi3State.ClaimStatus redemptionCondition\n        );\n\n    event IouRedeemed(bytes32 indexed iouId, uint256 amount);\n\n    event IouDeleted(bytes32 indexed iouId);\n\n    function redeem(bytes32 iouId)\n        external;\n}\n"
    },
    "@api3-contracts/api3-pool/contracts/interfaces/IApi3State.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n\ninterface IApi3State {\n    enum ClaimStatus { Pending, Accepted, Denied }\n\n    event InflationManagerUpdated(address inflationManagerAddress);\n    event ClaimsManagerUpdated(address claimsManagerAddress);\n    event RewardVestingPeriodUpdated(uint256 rewardVestingPeriod);\n    event UnpoolRequestCooldownUpdated(uint256 unpoolRequestCooldown);\n    event UnpoolWaitingPeriodUpdated(uint256 unpoolWaitingPeriod);\n\n    function updateInflationManager(address inflationManagerAddress)\n        external;\n\n    function updateClaimsManager(address claimsManagerAddress)\n        external;\n\n    function updateRewardVestingPeriod(uint256 _rewardVestingPeriod)\n        external;\n\n    function updateUnpoolRequestCooldown(uint256 _unpoolRequestCooldown)\n        external;\n\n    function updateUnpoolWaitingPeriod(uint256 _unpoolWaitingPeriod)\n        external;\n}\n"
    },
    "@api3-contracts/api3-pool/contracts/interfaces/IClaimUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"./IGetterUtils.sol\";\n\n\ninterface IClaimUtils is IGetterUtils {\n    event ClaimCreated(\n        bytes32 indexed claimId,\n        address indexed beneficiary,\n        uint256 amount\n        );\n\n    event ClaimAccepted(bytes32 indexed claimId);\n\n    event ClaimDenied(bytes32 indexed claimId);\n\n    function createClaim(\n        address beneficiary,\n        uint256 amount\n        )\n        external;\n\n    function acceptClaim(bytes32 claimId)\n        external;\n\n    function denyClaim(bytes32 claimId)\n        external;\n}\n"
    },
    "@api3-contracts/api3-pool/contracts/interfaces/IGetterUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"./IEpochUtils.sol\";\n\n\ninterface IGetterUtils is IEpochUtils {\n    function getPooled(address userAddress)\n        external\n        view\n        returns(uint256 pooled);\n\n    function getVotingPower(\n        address delegate,\n        uint256 timestamp\n        )\n        external\n        view\n        returns(uint256 votingPower);\n\n    function getTotalRealPooled()\n        external\n        view\n        returns(uint256 totalRealPooled);\n\n    function getBalance(address userAddress)\n        external\n        view\n        returns(uint256 balance);\n\n    function getShare(address userAddress)\n        external\n        view\n        returns(uint256 share);\n\n    function getUnpoolRequestEpoch(address userAddress)\n        external\n        view\n        returns(uint256 unpoolRequestEpoch);\n\n    function getTotalStaked(uint256 epochIndex)\n        external\n        view\n        returns(uint256 totalStaked);\n\n    function getStaked(\n        address userAddress,\n        uint256 epochIndex\n        )\n        external\n        view\n        returns(uint256 staked);\n\n    function getDelegate(address userAddress)\n        external\n        view\n        returns(address delegate);\n\n    function getDelegated(\n        address delegate,\n        uint256 epochIndex\n        )\n        external\n        view\n        returns(uint256 delegated);\n\n    function getVestedRewards(uint256 epochIndex)\n        external\n        view\n        returns(uint256 vestedRewards);\n\n    function getUnpaidVestedRewards(uint256 epochIndex)\n        external\n        view\n        returns(uint256 unpaidVestedRewards);\n\n    function getInstantRewards(uint256 epochIndex)\n        external\n        view\n        returns(uint256 instantRewards);\n\n    function getUnpaidInstantRewards(uint256 epochIndex)\n        external\n        view\n        returns(uint256 unpaidInstantRewards);\n\n    function getVesting(bytes32 vestingId)\n        external\n        view\n        returns(\n            address userAddress,\n            uint256 amount,\n            uint256 epoch\n            );\n\n    function getUnvestedFund(address userAddress)\n        external\n        view\n        returns(uint256 unvestedFund);\n\n    function getClaim(bytes32 claimId)\n        external\n        view\n        returns(\n            address beneficiary,\n            uint256 amount,\n            IApi3State.ClaimStatus status\n            );\n\n    function getActiveClaims()\n        external\n        view\n        returns(bytes32[] memory _activeClaims);\n\n    function getIou(bytes32 iouId)\n        external\n        view\n        returns(\n            address userAddress,\n            uint256 amountInShares,\n            bytes32 claimId,\n            IApi3State.ClaimStatus redemptionCondition\n            );\n}\n"
    },
    "@api3-contracts/api3-pool/contracts/interfaces/IEpochUtils.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"./IApi3State.sol\";\n\n\ninterface IEpochUtils is IApi3State {\n    function getCurrentEpochIndex()\n        external\n        view\n        returns(uint256 currentEpochIndex);\n\n    function getEpochIndex(uint256 timestamp)\n        external\n        view\n        returns(uint256 epochIndex);\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers"
        ],
        "": [
          "id",
          "ast"
        ]
      }
    }
  }
}