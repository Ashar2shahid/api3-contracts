{
  "address": "0x2176D77Fd2D445DA01E004e93ac040eFc8ef805A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "api3TokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "timelockManagerOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "api3PoolAddress",
          "type": "address"
        }
      ],
      "name": "Api3PoolUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releaseStart",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releaseEnd",
          "type": "uint256"
        }
      ],
      "name": "TransferredAndLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "api3PoolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "WithdrawnToPool",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "api3Pool",
      "outputs": [
        {
          "internalType": "contract IApi3Pool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "api3Token",
      "outputs": [
        {
          "internalType": "contract IApi3Token",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "getRemainingAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "remainingAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "getTimelock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remainingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releaseStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releaseEnd",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "getWithdrawable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "withdrawable",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "timelocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remainingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releaseStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releaseEnd",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releaseStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releaseEnd",
          "type": "uint256"
        }
      ],
      "name": "transferAndLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "releaseStarts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "releaseEnds",
          "type": "uint256[]"
        }
      ],
      "name": "transferAndLockMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "api3PoolAddress",
          "type": "address"
        }
      ],
      "name": "updateApi3Pool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "api3PoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "withdrawToPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3c61cea232f49bfbda9f3b30bff231f072fcbf42f25045d0fd06d24ba3302f62",
  "receipt": {
    "to": null,
    "from": "0x1Da10cDEc44538E1854791b8e71FA4Ef05b4b238",
    "contractAddress": "0x2176D77Fd2D445DA01E004e93ac040eFc8ef805A",
    "transactionIndex": 5,
    "gasUsed": "2093227",
    "logsBloom": "0x
    "blockHash": "0xcfe580b055d070702c6e6f0b9ee95f17b522d763dedda1c9c9db133c8187f12a",
    "transactionHash": "0x3c61cea232f49bfbda9f3b30bff231f072fcbf42f25045d0fd06d24ba3302f62",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 7467135,
        "transactionHash": "0x3c61cea232f49bfbda9f3b30bff231f072fcbf42f25045d0fd06d24ba3302f62",
        "address": "0x2176D77Fd2D445DA01E004e93ac040eFc8ef805A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001da10cdec44538e1854791b8e71fa4ef05b4b238"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0xcfe580b055d070702c6e6f0b9ee95f17b522d763dedda1c9c9db133c8187f12a"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 7467135,
        "transactionHash": "0x3c61cea232f49bfbda9f3b30bff231f072fcbf42f25045d0fd06d24ba3302f62",
        "address": "0x2176D77Fd2D445DA01E004e93ac040eFc8ef805A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000001da10cdec44538e1854791b8e71fa4ef05b4b238",
          "0x0000000000000000000000000c26bb185ad09c5a41e8fd127bf7b8c99e81e5dc"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0xcfe580b055d070702c6e6f0b9ee95f17b522d763dedda1c9c9db133c8187f12a"
      }
    ],
    "blockNumber": 7467135,
    "cumulativeGasUsed": "2540997",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8878C14cFC1233db8AeDc09d497b7fb95ba96fD4",
    "0x0c26bb185ad09c5a41e8fd127bf7b8c99e81e5dc"
  ],
  "solcInputHash": "0x3d10d3ca18eabe84017a6949b5821818d49ef66b0d1183129f7990a1dda4c7af",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"api3TokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"timelockManagerOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"api3PoolAddress\",\"type\":\"address\"}],\"name\":\"Api3PoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseEnd\",\"type\":\"uint256\"}],\"name\":\"TransferredAndLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"api3PoolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"WithdrawnToPool\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"api3Pool\",\"outputs\":[{\"internalType\":\"contract IApi3Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"api3Token\",\"outputs\":[{\"internalType\":\"contract IApi3Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"getRemainingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"getTimelock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseEnd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"getWithdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"timelocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseEnd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseEnd\",\"type\":\"uint256\"}],\"name\":\"transferAndLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"releaseStarts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"releaseEnds\",\"type\":\"uint256[]\"}],\"name\":\"transferAndLockMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"api3PoolAddress\",\"type\":\"address\"}],\"name\":\"updateApi3Pool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"api3PoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawToPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"api3Pool is not initialized in the constructor because this contract will be deployed before api3Pool\",\"params\":{\"api3TokenAddress\":\"Address of the API3 token contract\",\"timelockManagerOwner\":\"Address that will receive the ownership of the TimelockManager contract (i.e., the API3 DAO)\"}},\"getRemainingAmount(address)\":{\"details\":\"Provided separately to be used with Etherscan's \\\"Read\\\" functionality, in case getTimelock() output is too complicated for the user.\",\"params\":{\"recipient\":\"Recipient of tokens\"},\"returns\":{\"remainingAmount\":\"Remaining amount of tokens to be withdrawn\"}},\"getTimelock(address)\":{\"params\":{\"recipient\":\"Recipient of tokens\"},\"returns\":{\"releaseEnd\":\"Release end time\",\"releaseStart\":\"Release start time\",\"remainingAmount\":\"Remaining amount of tokens to be withdrawn\",\"totalAmount\":\"Total amount of tokens\"}},\"getWithdrawable(address)\":{\"params\":{\"recipient\":\"Address of the recipient\"},\"returns\":{\"withdrawable\":\"Amount of tokens withdrawable by the recipient\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferAndLock(address,address,uint256,uint256,uint256)\":{\"details\":\"source needs to approve() this contract to transfer amount number of tokens beforehand. A recipient cannot have multiple independent timelocks.\",\"params\":{\"amount\":\"Amount of tokens\",\"recipient\":\"Recipient of tokens\",\"releaseEnd\":\"End of release time\",\"releaseStart\":\"Start of release time\",\"source\":\"Source of tokens\"}},\"transferAndLockMultiple(address,address[],uint256[],uint256[],uint256[])\":{\"details\":\"source is expected to be a single address, i.e., the API3 DAO. source needs to approve() this contract to transfer the sum of the amounts of tokens to be transferred and locked.\",\"params\":{\"amounts\":\"Array of amounts of tokens\",\"recipients\":\"Array of recipients of tokens\",\"releaseEnds\":\"Array of ends of release times\",\"releaseStarts\":\"Array of starts of release times\",\"source\":\"Source of tokens\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateApi3Pool(address)\":{\"params\":{\"api3PoolAddress\":\"Address of the API3 pool contract\"}},\"withdraw(address)\":{\"params\":{\"destination\":\"Address that will receive the tokens\"}},\"withdrawToPool(address,address)\":{\"details\":\"We ask the recipient to provide api3PoolAddress as a form of validation, i.e., the recipient confirms that the API3 pool address set at this contract is correct\",\"params\":{\"api3PoolAddress\":\"Address of the API3 pool contract\",\"beneficiary\":\"Address that the tokens will be deposited to the pool contract on behalf of\"}}},\"title\":\"Contract that the API3 DAO uses to timelock API3 tokens\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getRemainingAmount(address)\":{\"notice\":\"Returns remaining amount of a timelock\"},\"getTimelock(address)\":{\"notice\":\"Returns the details of a timelock\"},\"getWithdrawable(address)\":{\"notice\":\"Returns the amount of tokens a recipient can currently withdraw\"},\"transferAndLock(address,address,uint256,uint256,uint256)\":{\"notice\":\"Transfers API3 tokens to this contract and timelocks them\"},\"transferAndLockMultiple(address,address[],uint256[],uint256[],uint256[])\":{\"notice\":\"Convenience function that calls transferAndLock() multiple times\"},\"updateApi3Pool(address)\":{\"notice\":\"Allows the owner (i.e., API3 DAO) to set the address of api3Pool, which token recipients can transfer their tokens to\"},\"withdraw(address)\":{\"notice\":\"Used by the recipient to withdraw tokens\"},\"withdrawToPool(address,address)\":{\"notice\":\"Used by the recipient to withdraw their tokens to the API3 pool\"}},\"notice\":\"The owner of TimelockManager (i.e., API3 DAO) can send tokens to TimelockManager to timelock them. These tokens will then be vested to their recipient linearly, starting from releaseStart and ending at releaseEnd of the respective timelock. Alternatively, if the owner of TimelockManager (i.e., API3 DAO) sets the api3Pool address, the token recipients can transfer their locked tokens from TimelockManager to api3Pool. These tokens will remain timelocked (i.e., will not be withdrawable) at api3Pool until they are vested according to their respective schedule.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TimelockManager.sol\":\"TimelockManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@api3-contracts/api3-pool/contracts/interfaces/IApi3Pool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"./ITransferUtils.sol\\\";\\n\\n\\ninterface IApi3Pool is ITransferUtils {}\\n\",\"keccak256\":\"0xda4c76fe47c59f29b526497fc0ec26757f8e02a95bf37ff42c44db72744dd86b\",\"license\":\"MIT\"},\"@api3-contracts/api3-pool/contracts/interfaces/IApi3State.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IApi3State {\\n    enum ClaimStatus { Pending, Accepted, Denied }\\n\\n    event InflationManagerUpdated(address inflationManagerAddress);\\n    event ClaimsManagerUpdated(address claimsManagerAddress);\\n    event RewardVestingPeriodUpdated(uint256 rewardVestingPeriod);\\n    event UnpoolRequestCooldownUpdated(uint256 unpoolRequestCooldown);\\n    event UnpoolWaitingPeriodUpdated(uint256 unpoolWaitingPeriod);\\n\\n    function updateInflationManager(address inflationManagerAddress)\\n        external;\\n\\n    function updateClaimsManager(address claimsManagerAddress)\\n        external;\\n\\n    function updateRewardVestingPeriod(uint256 _rewardVestingPeriod)\\n        external;\\n\\n    function updateUnpoolRequestCooldown(uint256 _unpoolRequestCooldown)\\n        external;\\n\\n    function updateUnpoolWaitingPeriod(uint256 _unpoolWaitingPeriod)\\n        external;\\n}\\n\",\"keccak256\":\"0x7cc63cdf2f2e7673076a91433fde1a0f73ad943ab73b14e6ecfe96f13efa70f8\",\"license\":\"MIT\"},\"@api3-contracts/api3-pool/contracts/interfaces/IClaimUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"./IGetterUtils.sol\\\";\\n\\n\\ninterface IClaimUtils is IGetterUtils {\\n    event ClaimCreated(\\n        bytes32 indexed claimId,\\n        address indexed beneficiary,\\n        uint256 amount\\n        );\\n\\n    event ClaimAccepted(bytes32 indexed claimId);\\n\\n    event ClaimDenied(bytes32 indexed claimId);\\n\\n    function createClaim(\\n        address beneficiary,\\n        uint256 amount\\n        )\\n        external;\\n\\n    function acceptClaim(bytes32 claimId)\\n        external;\\n\\n    function denyClaim(bytes32 claimId)\\n        external;\\n}\\n\",\"keccak256\":\"0x27ca9d3a6ea5c35497cb8d437990e5ebb669aeb465fff3b8682788447fac6cc9\",\"license\":\"MIT\"},\"@api3-contracts/api3-pool/contracts/interfaces/IEpochUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"./IApi3State.sol\\\";\\n\\n\\ninterface IEpochUtils is IApi3State {\\n    function getCurrentEpochIndex()\\n        external\\n        view\\n        returns(uint256 currentEpochIndex);\\n\\n    function getEpochIndex(uint256 timestamp)\\n        external\\n        view\\n        returns(uint256 epochIndex);\\n}\\n\",\"keccak256\":\"0x7c203025715c06d0c75c90173fb73247eec386f066ae142155d2553102387fb4\",\"license\":\"MIT\"},\"@api3-contracts/api3-pool/contracts/interfaces/IGetterUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"./IEpochUtils.sol\\\";\\n\\n\\ninterface IGetterUtils is IEpochUtils {\\n    function getPooled(address userAddress)\\n        external\\n        view\\n        returns(uint256 pooled);\\n\\n    function getVotingPower(\\n        address delegate,\\n        uint256 timestamp\\n        )\\n        external\\n        view\\n        returns(uint256 votingPower);\\n\\n    function getTotalRealPooled()\\n        external\\n        view\\n        returns(uint256 totalRealPooled);\\n\\n    function getBalance(address userAddress)\\n        external\\n        view\\n        returns(uint256 balance);\\n\\n    function getShare(address userAddress)\\n        external\\n        view\\n        returns(uint256 share);\\n\\n    function getUnpoolRequestEpoch(address userAddress)\\n        external\\n        view\\n        returns(uint256 unpoolRequestEpoch);\\n\\n    function getTotalStaked(uint256 epochIndex)\\n        external\\n        view\\n        returns(uint256 totalStaked);\\n\\n    function getStaked(\\n        address userAddress,\\n        uint256 epochIndex\\n        )\\n        external\\n        view\\n        returns(uint256 staked);\\n\\n    function getDelegate(address userAddress)\\n        external\\n        view\\n        returns(address delegate);\\n\\n    function getDelegated(\\n        address delegate,\\n        uint256 epochIndex\\n        )\\n        external\\n        view\\n        returns(uint256 delegated);\\n\\n    function getVestedRewards(uint256 epochIndex)\\n        external\\n        view\\n        returns(uint256 vestedRewards);\\n\\n    function getUnpaidVestedRewards(uint256 epochIndex)\\n        external\\n        view\\n        returns(uint256 unpaidVestedRewards);\\n\\n    function getInstantRewards(uint256 epochIndex)\\n        external\\n        view\\n        returns(uint256 instantRewards);\\n\\n    function getUnpaidInstantRewards(uint256 epochIndex)\\n        external\\n        view\\n        returns(uint256 unpaidInstantRewards);\\n\\n    function getVesting(bytes32 vestingId)\\n        external\\n        view\\n        returns(\\n            address userAddress,\\n            uint256 amount,\\n            uint256 epoch\\n            );\\n\\n    function getUnvestedFund(address userAddress)\\n        external\\n        view\\n        returns(uint256 unvestedFund);\\n\\n    function getClaim(bytes32 claimId)\\n        external\\n        view\\n        returns(\\n            address beneficiary,\\n            uint256 amount,\\n            IApi3State.ClaimStatus status\\n            );\\n\\n    function getActiveClaims()\\n        external\\n        view\\n        returns(bytes32[] memory _activeClaims);\\n\\n    function getIou(bytes32 iouId)\\n        external\\n        view\\n        returns(\\n            address userAddress,\\n            uint256 amountInShares,\\n            bytes32 claimId,\\n            IApi3State.ClaimStatus redemptionCondition\\n            );\\n}\\n\",\"keccak256\":\"0x61c8677f42921dd777c82ec6365586582c317e3a6a1ea809ee1757fb0dd10f92\",\"license\":\"MIT\"},\"@api3-contracts/api3-pool/contracts/interfaces/IIouUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"./IApi3State.sol\\\";\\nimport \\\"./IClaimUtils.sol\\\";\\n\\n\\ninterface IIouUtils is IClaimUtils {\\n    event IouCreated(\\n        bytes32 indexed iouId,\\n        address indexed userAddress,\\n        uint256 amountInShares,\\n        bytes32 indexed claimId,\\n        IApi3State.ClaimStatus redemptionCondition\\n        );\\n\\n    event IouRedeemed(bytes32 indexed iouId, uint256 amount);\\n\\n    event IouDeleted(bytes32 indexed iouId);\\n\\n    function redeem(bytes32 iouId)\\n        external;\\n}\\n\",\"keccak256\":\"0x4e469f6073d6834d5f9273eec990b07ce01aa323dd391a61b3bd5432f693c5d1\",\"license\":\"MIT\"},\"@api3-contracts/api3-pool/contracts/interfaces/IPoolUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"./IStakeUtils.sol\\\";\\n\\n\\ninterface IPoolUtils is IStakeUtils {\\n    event Pooled(\\n        address indexed userAddress,\\n        uint256 amount,\\n        uint256 amountInShares\\n        );\\n    \\n    event RequestedToUnpool(address indexed userAddress);\\n\\n    event Unpooled(\\n        address indexed userAddress,\\n        uint256 amount,\\n        uint256 amountInShares\\n    );\\n\\n    function pool(uint256 amount)\\n        external;\\n\\n    function requestToUnpool()\\n        external;\\n\\n    function unpool(uint256 amountInShares)\\n        external;\\n}\\n\",\"keccak256\":\"0x1cb43bdd0b41116ba60606491da2c155c874ba788ae5996b4a7ff0c7da3bed41\",\"license\":\"MIT\"},\"@api3-contracts/api3-pool/contracts/interfaces/IStakeUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"./IVestingUtils.sol\\\";\\n\\n\\ninterface IStakeUtils is IVestingUtils {\\n    event Staked(\\n        address indexed userAddress,\\n        uint256 amountInShares\\n        );\\n    \\n    event UpdatedDelegate(\\n        address indexed userAddress,\\n        address indexed delegate\\n        );\\n\\n    event Collected(\\n        address indexed userAddress,\\n        uint256 vestedRewards,\\n        uint256 instantRewards\\n        );\\n\\n    function stake(address userAddress)\\n        external;\\n\\n    function updateDelegate(address delegate)\\n        external;\\n\\n    function collect(address userAddress)\\n        external;\\n}\\n\",\"keccak256\":\"0xd5d14995a93249578d7bbc0e9d30de7dd8d49779f62f4978820503cb1930ea94\",\"license\":\"MIT\"},\"@api3-contracts/api3-pool/contracts/interfaces/ITransferUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"./IPoolUtils.sol\\\";\\n\\n\\ninterface ITransferUtils is IPoolUtils {\\n    event Deposited(\\n        address indexed sourceAddress,\\n        uint256 amount,\\n        address indexed userAddress\\n        );\\n    \\n    event DepositedWithVesting(\\n        address indexed sourceAddress,\\n        uint256 amount,\\n        address indexed userAddress,\\n        uint256 vestingEpoch\\n        );\\n    \\n    event Withdrawn(\\n        address indexed userAddress,\\n        address destinationAddress,\\n        uint256 amount\\n        );\\n    \\n    event AddedVestedRewards(\\n        address indexed sourceAddress,\\n        uint256 amount,\\n        uint256 indexed epochIndex\\n        );\\n    \\n    event AddedInstantRewards(\\n        address indexed sourceAddress,\\n        uint256 amount,\\n        uint256 indexed epochIndex\\n        );\\n\\n    function deposit(\\n        address sourceAddress,\\n        uint256 amount,\\n        address userAddress\\n        )\\n        external;\\n\\n    function depositWithVesting(\\n        address sourceAddress,\\n        uint256 amount,\\n        address userAddress,\\n        uint256 vestingStart,\\n        uint256 vestingEnd\\n        )\\n        external;\\n\\n    function withdraw(\\n        address destinationAddress,\\n        uint256 amount\\n        )\\n        external;\\n\\n    function addVestedRewards(\\n        address sourceAddress,\\n        uint256 amount\\n        )\\n        external;\\n\\n    function addInstantRewards(\\n        address sourceAddress,\\n        uint256 amount\\n        )\\n        external;\\n}\\n\",\"keccak256\":\"0xd0a57fe7bb87b4f0607a758d1f510bc8f6b9581ac4c5a7f66aed59c9c8c02761\",\"license\":\"MIT\"},\"@api3-contracts/api3-pool/contracts/interfaces/IVestingUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"./IIouUtils.sol\\\";\\n\\n\\ninterface IVestingUtils is IIouUtils {\\n    event VestingCreated(\\n        bytes32 indexed vestingId,\\n        address indexed userAddress,\\n        uint256 amount,\\n        uint256 vestingEpoch\\n        );\\n\\n    event VestingResolved(bytes32 indexed vestingId);\\n\\n    function vest(bytes32 vestingId)\\n        external;\\n}\\n\",\"keccak256\":\"0x3cea7aa5634935299c61a73c4f7f7623db85d1a6d6c0abbbd9af926a34f7a020\",\"license\":\"MIT\"},\"@api3-contracts/api3-token/contracts/interfaces/IApi3Token.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IApi3Token is IERC20 {\\n    event MinterStatusUpdated(\\n        address indexed minterAddress,\\n        bool minterStatus\\n        );\\n\\n    function updateMinterStatus(\\n        address minterAddress,\\n        bool minterStatus\\n        )\\n        external;\\n\\n    function mint(\\n        address account,\\n        uint256 amount\\n        )\\n        external;\\n\\n    function burn(uint256 amount)\\n        external;\\n\\n    function getMinterStatus(address minterAddress)\\n        external\\n        view\\n        returns(bool minterStatus);\\n}\\n\",\"keccak256\":\"0xf19d862ed9924efe0bdbedf91ccb573bbc4a8d1029194f26386a61ad90e86b62\",\"license\":\"MIT\"},\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x4bd6402ca6b3419008c2b482aff54e66836e8cb4eba2680e42ac5884ae6424fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5c26b39d26f7ed489e555d955dcd3e01872972e71fdd1528e93ec164e4f23385\",\"license\":\"MIT\"},\"contracts/TimelockManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@api3-contracts/api3-token/contracts/interfaces/IApi3Token.sol\\\";\\nimport \\\"@api3-contracts/api3-pool/contracts/interfaces/IApi3Pool.sol\\\";\\nimport \\\"./interfaces/ITimelockManager.sol\\\";\\n\\n\\n/// @title Contract that the API3 DAO uses to timelock API3 tokens\\n/// @notice The owner of TimelockManager (i.e., API3 DAO) can send tokens to\\n/// TimelockManager to timelock them. These tokens will then be vested to their\\n/// recipient linearly, starting from releaseStart and ending at releaseEnd of\\n/// the respective timelock.\\n/// Alternatively, if the owner of TimelockManager (i.e., API3 DAO) sets the\\n/// api3Pool address, the token recipients can transfer their locked tokens\\n/// from TimelockManager to api3Pool. These tokens will remain timelocked\\n/// (i.e., will not be withdrawable) at api3Pool until they are vested\\n/// according to their respective schedule.\\ncontract TimelockManager is Ownable, ITimelockManager {\\n    using SafeMath for uint256;\\n\\n    struct Timelock {\\n        uint256 totalAmount;\\n        uint256 remainingAmount;\\n        uint256 releaseStart;\\n        uint256 releaseEnd;\\n        }\\n\\n    IApi3Token public immutable api3Token;\\n    IApi3Pool public api3Pool;\\n    mapping(address => Timelock) public timelocks;\\n\\n    /// @dev api3Pool is not initialized in the constructor because this\\n    /// contract will be deployed before api3Pool\\n    /// @param api3TokenAddress Address of the API3 token contract\\n    /// @param timelockManagerOwner Address that will receive the ownership of\\n    /// the TimelockManager contract (i.e., the API3 DAO)\\n    constructor(\\n        address api3TokenAddress,\\n        address timelockManagerOwner\\n        )\\n        public\\n    {\\n        api3Token = IApi3Token(api3TokenAddress);\\n        transferOwnership(timelockManagerOwner);\\n    }\\n\\n    /// @notice Allows the owner (i.e., API3 DAO) to set the address of\\n    /// api3Pool, which token recipients can transfer their tokens to\\n    /// @param api3PoolAddress Address of the API3 pool contract\\n    function updateApi3Pool(address api3PoolAddress)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        api3Pool = IApi3Pool(api3PoolAddress);\\n        emit Api3PoolUpdated(api3PoolAddress);\\n    }\\n\\n    /// @notice Transfers API3 tokens to this contract and timelocks them\\n    /// @dev source needs to approve() this contract to transfer amount number\\n    /// of tokens beforehand.\\n    /// A recipient cannot have multiple independent timelocks.\\n    /// @param source Source of tokens\\n    /// @param recipient Recipient of tokens\\n    /// @param amount Amount of tokens\\n    /// @param releaseStart Start of release time\\n    /// @param releaseEnd End of release time\\n    function transferAndLock(\\n        address source,\\n        address recipient,\\n        uint256 amount,\\n        uint256 releaseStart,\\n        uint256 releaseEnd\\n        )\\n        public\\n        override\\n        onlyOwner\\n    {\\n        require(\\n            timelocks[recipient].remainingAmount == 0,\\n            \\\"Recipient has remaining tokens\\\"\\n            );\\n        require(amount != 0, \\\"Amount cannot be 0\\\");\\n        require(\\n            releaseEnd > releaseStart,\\n            \\\"releaseEnd has to be larger than releaseStart\\\"\\n            );\\n        timelocks[recipient] = Timelock({\\n            totalAmount: amount,\\n            remainingAmount: amount,\\n            releaseStart: releaseStart,\\n            releaseEnd: releaseEnd\\n            });\\n        emit TransferredAndLocked(\\n            source,\\n            recipient,\\n            amount,\\n            releaseStart,\\n            releaseEnd\\n            );\\n        require(\\n            api3Token.transferFrom(source, address(this), amount),\\n            \\\"API3 token transferFrom failed\\\"\\n            );\\n    }\\n\\n    /// @notice Convenience function that calls transferAndLock() multiple times\\n    /// @dev source is expected to be a single address, i.e., the API3 DAO.\\n    /// source needs to approve() this contract to transfer the sum of the\\n    /// amounts of tokens to be transferred and locked.\\n    /// @param source Source of tokens\\n    /// @param recipients Array of recipients of tokens\\n    /// @param amounts Array of amounts of tokens\\n    /// @param releaseStarts Array of starts of release times\\n    /// @param releaseEnds Array of ends of release times\\n    function transferAndLockMultiple(\\n        address source,\\n        address[] calldata recipients,\\n        uint256[] calldata amounts,\\n        uint256[] calldata releaseStarts,\\n        uint256[] calldata releaseEnds\\n        )\\n        external\\n        override\\n        onlyOwner\\n    {\\n        require(\\n            recipients.length == amounts.length\\n                && recipients.length == releaseStarts.length\\n                && recipients.length == releaseEnds.length,\\n            \\\"Lengths of parameters do not match\\\"\\n            );\\n        require(\\n            recipients.length <= 30,\\n            \\\"Parameters are longer than 30\\\"\\n            );\\n        for (uint256 ind = 0; ind < recipients.length; ind++)\\n        {\\n            transferAndLock(\\n                source,\\n                recipients[ind],\\n                amounts[ind],\\n                releaseStarts[ind],\\n                releaseEnds[ind]\\n                );\\n        }\\n    }\\n\\n    /// @notice Used by the recipient to withdraw tokens\\n    /// @param destination Address that will receive the tokens\\n    function withdraw(address destination)\\n        external\\n        override\\n        onlyIfDestinationIsValid(destination)\\n        onlyIfRecipientHasRemainingTokens(msg.sender)\\n    {\\n        address recipient = msg.sender;\\n        uint256 withdrawable = getWithdrawable(recipient);\\n        require(\\n            withdrawable != 0,\\n            \\\"No withdrawable tokens yet\\\"\\n            );\\n        timelocks[recipient].remainingAmount = timelocks[recipient].remainingAmount.sub(withdrawable);\\n        emit Withdrawn(\\n            recipient,\\n            destination\\n            );\\n        require(\\n            api3Token.transfer(destination, withdrawable),\\n            \\\"API3 token transfer failed\\\"\\n            );\\n    }\\n\\n    /// @notice Used by the recipient to withdraw their tokens to the API3 pool\\n    /// @dev We ask the recipient to provide api3PoolAddress as a form of\\n    /// validation, i.e., the recipient confirms that the API3 pool address set\\n    /// at this contract is correct\\n    /// @param api3PoolAddress Address of the API3 pool contract\\n    /// @param beneficiary Address that the tokens will be deposited to the\\n    /// pool contract on behalf of\\n    function withdrawToPool(\\n        address api3PoolAddress,\\n        address beneficiary\\n        )\\n        external\\n        override\\n        onlyIfRecipientHasRemainingTokens(msg.sender)\\n    {\\n        require(\\n            beneficiary != address(0),\\n            \\\"Cannot withdraw to benefit address 0\\\"\\n            );\\n        require(address(api3Pool) != address(0), \\\"API3 pool not set yet\\\");\\n        require(\\n            address(api3Pool) == api3PoolAddress,\\n            \\\"API3 pool addresses do not match\\\"\\n            );\\n        address recipient = msg.sender;\\n        uint256 withdrawable = getWithdrawable(recipient);\\n        uint256 remaining = timelocks[recipient].remainingAmount;\\n        uint256 timelocked = remaining.sub(withdrawable);\\n        timelocks[recipient].remainingAmount = 0;\\n        emit WithdrawnToPool(\\n            recipient,\\n            api3PoolAddress,\\n            beneficiary\\n            );\\n        // Approve the total amount\\n        api3Token.approve(address(api3Pool), remaining);\\n        // Deposit the funds that are withdrawable without vesting\\n        if (withdrawable != 0)\\n        {\\n            api3Pool.deposit(\\n                address(this),\\n                withdrawable,\\n                beneficiary\\n                );\\n        }\\n        // Deposit the funds that are still timelocked with vesting.\\n        // The vesting will continue the same way at the pool, released\\n        // linearly.\\n        api3Pool.depositWithVesting(\\n            address(this),\\n            timelocked,\\n            beneficiary,\\n            now > timelocks[recipient].releaseStart ? now : timelocks[recipient].releaseStart,\\n            timelocks[recipient].releaseEnd\\n            );\\n    }\\n\\n    /// @notice Returns the amount of tokens a recipient can currently withdraw\\n    /// @param recipient Address of the recipient\\n    /// @return withdrawable Amount of tokens withdrawable by the recipient\\n    function getWithdrawable(address recipient)\\n        public\\n        view\\n        returns(uint256 withdrawable)\\n    {\\n        Timelock storage timelock = timelocks[recipient];\\n        uint256 unlocked = getUnlocked(recipient);\\n        uint256 withdrawn = timelock.totalAmount.sub(timelock.remainingAmount);\\n        withdrawable = unlocked.sub(withdrawn);\\n    }\\n\\n    /// @notice Returns the amount of tokens that was unlocked by the\\n    /// recipient to date. Includes both withdrawn and non-withdrawn tokens.\\n    /// @param recipient Address of the recipient\\n    /// @return unlocked Amount of tokens unlocked for the recipient\\n    function getUnlocked(address recipient)\\n        private\\n        view\\n        returns(uint256 unlocked)\\n    {\\n        Timelock storage timelock = timelocks[recipient];\\n        if (now <= timelock.releaseStart)\\n        {\\n            unlocked = 0;\\n        }\\n        else if (now >= timelock.releaseEnd)\\n        {\\n            unlocked = timelock.totalAmount;\\n        }\\n        else\\n        {\\n            uint256 passedTime = now.sub(timelock.releaseStart);\\n            uint256 totalTime = timelock.releaseEnd.sub(timelock.releaseStart);\\n            unlocked = timelock.totalAmount.mul(passedTime).div(totalTime);\\n        }\\n    }\\n\\n    /// @notice Returns the details of a timelock\\n    /// @param recipient Recipient of tokens\\n    /// @return totalAmount Total amount of tokens\\n    /// @return remainingAmount Remaining amount of tokens to be withdrawn\\n    /// @return releaseStart Release start time\\n    /// @return releaseEnd Release end time\\n    function getTimelock(address recipient)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 totalAmount,\\n            uint256 remainingAmount,\\n            uint256 releaseStart,\\n            uint256 releaseEnd\\n            )\\n    {\\n        Timelock storage timelock = timelocks[recipient];\\n        totalAmount = timelock.totalAmount;\\n        remainingAmount = timelock.remainingAmount;\\n        releaseStart = timelock.releaseStart;\\n        releaseEnd = timelock.releaseEnd;\\n    }\\n\\n    /// @notice Returns remaining amount of a timelock\\n    /// @dev Provided separately to be used with Etherscan's \\\"Read\\\"\\n    /// functionality, in case getTimelock() output is too complicated for the\\n    /// user.\\n    /// @param recipient Recipient of tokens\\n    /// @return remainingAmount Remaining amount of tokens to be withdrawn\\n    function getRemainingAmount(address recipient)\\n        external\\n        view\\n        override\\n        returns (uint256 remainingAmount)\\n    {\\n        remainingAmount = timelocks[recipient].remainingAmount;\\n    }\\n\\n    /// @dev Reverts if the destination is address(0)\\n    modifier onlyIfDestinationIsValid(address destination)\\n    {\\n        require(\\n            destination != address(0),\\n            \\\"Invalid destination\\\"\\n            );\\n        _;\\n    }\\n\\n    /// @dev Reverts if the recipient does not have remaining tokens\\n    modifier onlyIfRecipientHasRemainingTokens(address recipient)\\n    {\\n        require(\\n            timelocks[recipient].remainingAmount != 0,\\n            \\\"Recipient does not have remaining tokens\\\"\\n            );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xf6ba58edca51fc202ab35b254beda2bd5b8cb2c169dd7429c34e7769abd1be04\",\"license\":\"MIT\"},\"contracts/interfaces/ITimelockManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n\\ninterface ITimelockManager {\\n    event Api3PoolUpdated(address api3PoolAddress);\\n\\n    event TransferredAndLocked(\\n        address source,\\n        address indexed recipient,\\n        uint256 amount,\\n        uint256 releaseStart,\\n        uint256 releaseEnd\\n    );\\n\\n    event Withdrawn(\\n        address indexed recipient,\\n        address destination\\n    );\\n\\n    event WithdrawnToPool(\\n        address indexed recipient,\\n        address api3PoolAddress,\\n        address beneficiary\\n    );\\n\\n    function updateApi3Pool(address api3PoolAddress)\\n        external;\\n\\n    function transferAndLock(\\n        address source,\\n        address recipient,\\n        uint256 amount,\\n        uint256 releaseStart,\\n        uint256 releaseEnd\\n        )\\n        external;\\n\\n    function transferAndLockMultiple(\\n        address source,\\n        address[] calldata recipients,\\n        uint256[] calldata amounts,\\n        uint256[] calldata releaseStarts,\\n        uint256[] calldata releaseEnds\\n        )\\n        external;\\n\\n    function withdraw(address destination)\\n        external;\\n\\n    function withdrawToPool(\\n        address api3PoolAddress,\\n        address beneficiary\\n        )\\n        external;\\n\\n    function getTimelock(address recipient)\\n        external\\n        view\\n        returns (\\n            uint256 totalAmount,\\n            uint256 remainingAmount,\\n            uint256 releaseStart,\\n            uint256 releaseEnd\\n            );\\n\\n    function getRemainingAmount(address recipient)\\n        external\\n        view\\n        returns (uint256 remainingAmount);\\n}\\n\",\"keccak256\":\"0x4eb235421eb1d7f33ab670cc846a6b8b2b6ac19bef1d3570546e1e23c6a87ade\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "api3Pool is not initialized in the constructor because this contract will be deployed before api3Pool",
        "params": {
          "api3TokenAddress": "Address of the API3 token contract",
          "timelockManagerOwner": "Address that will receive the ownership of the TimelockManager contract (i.e., the API3 DAO)"
        }
      },
      "getRemainingAmount(address)": {
        "details": "Provided separately to be used with Etherscan's \"Read\" functionality, in case getTimelock() output is too complicated for the user.",
        "params": {
          "recipient": "Recipient of tokens"
        },
        "returns": {
          "remainingAmount": "Remaining amount of tokens to be withdrawn"
        }
      },
      "getTimelock(address)": {
        "params": {
          "recipient": "Recipient of tokens"
        },
        "returns": {
          "releaseEnd": "Release end time",
          "releaseStart": "Release start time",
          "remainingAmount": "Remaining amount of tokens to be withdrawn",
          "totalAmount": "Total amount of tokens"
        }
      },
      "getWithdrawable(address)": {
        "params": {
          "recipient": "Address of the recipient"
        },
        "returns": {
          "withdrawable": "Amount of tokens withdrawable by the recipient"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferAndLock(address,address,uint256,uint256,uint256)": {
        "details": "source needs to approve() this contract to transfer amount number of tokens beforehand. A recipient cannot have multiple independent timelocks.",
        "params": {
          "amount": "Amount of tokens",
          "recipient": "Recipient of tokens",
          "releaseEnd": "End of release time",
          "releaseStart": "Start of release time",
          "source": "Source of tokens"
        }
      },
      "transferAndLockMultiple(address,address[],uint256[],uint256[],uint256[])": {
        "details": "source is expected to be a single address, i.e., the API3 DAO. source needs to approve() this contract to transfer the sum of the amounts of tokens to be transferred and locked.",
        "params": {
          "amounts": "Array of amounts of tokens",
          "recipients": "Array of recipients of tokens",
          "releaseEnds": "Array of ends of release times",
          "releaseStarts": "Array of starts of release times",
          "source": "Source of tokens"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateApi3Pool(address)": {
        "params": {
          "api3PoolAddress": "Address of the API3 pool contract"
        }
      },
      "withdraw(address)": {
        "params": {
          "destination": "Address that will receive the tokens"
        }
      },
      "withdrawToPool(address,address)": {
        "details": "We ask the recipient to provide api3PoolAddress as a form of validation, i.e., the recipient confirms that the API3 pool address set at this contract is correct",
        "params": {
          "api3PoolAddress": "Address of the API3 pool contract",
          "beneficiary": "Address that the tokens will be deposited to the pool contract on behalf of"
        }
      }
    },
    "title": "Contract that the API3 DAO uses to timelock API3 tokens",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getRemainingAmount(address)": {
        "notice": "Returns remaining amount of a timelock"
      },
      "getTimelock(address)": {
        "notice": "Returns the details of a timelock"
      },
      "getWithdrawable(address)": {
        "notice": "Returns the amount of tokens a recipient can currently withdraw"
      },
      "transferAndLock(address,address,uint256,uint256,uint256)": {
        "notice": "Transfers API3 tokens to this contract and timelocks them"
      },
      "transferAndLockMultiple(address,address[],uint256[],uint256[],uint256[])": {
        "notice": "Convenience function that calls transferAndLock() multiple times"
      },
      "updateApi3Pool(address)": {
        "notice": "Allows the owner (i.e., API3 DAO) to set the address of api3Pool, which token recipients can transfer their tokens to"
      },
      "withdraw(address)": {
        "notice": "Used by the recipient to withdraw tokens"
      },
      "withdrawToPool(address,address)": {
        "notice": "Used by the recipient to withdraw their tokens to the API3 pool"
      }
    },
    "notice": "The owner of TimelockManager (i.e., API3 DAO) can send tokens to TimelockManager to timelock them. These tokens will then be vested to their recipient linearly, starting from releaseStart and ending at releaseEnd of the respective timelock. Alternatively, if the owner of TimelockManager (i.e., API3 DAO) sets the api3Pool address, the token recipients can transfer their locked tokens from TimelockManager to api3Pool. These tokens will remain timelocked (i.e., will not be withdrawable) at api3Pool until they are vested according to their respective schedule.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 570,
        "contract": "contracts/TimelockManager.sol:TimelockManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 973,
        "contract": "contracts/TimelockManager.sol:TimelockManager",
        "label": "api3Pool",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IApi3Pool)5"
      },
      {
        "astId": 977,
        "contract": "contracts/TimelockManager.sol:TimelockManager",
        "label": "timelocks",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Timelock)969_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IApi3Pool)5": {
        "encoding": "inplace",
        "label": "contract IApi3Pool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Timelock)969_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TimelockManager.Timelock)",
        "numberOfBytes": "32",
        "value": "t_struct(Timelock)969_storage"
      },
      "t_struct(Timelock)969_storage": {
        "encoding": "inplace",
        "label": "struct TimelockManager.Timelock",
        "members": [
          {
            "astId": 962,
            "contract": "contracts/TimelockManager.sol:TimelockManager",
            "label": "totalAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 964,
            "contract": "contracts/TimelockManager.sol:TimelockManager",
            "label": "remainingAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 966,
            "contract": "contracts/TimelockManager.sol:TimelockManager",
            "label": "releaseStart",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 968,
            "contract": "contracts/TimelockManager.sol:TimelockManager",
            "label": "releaseEnd",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  },
  "gasEstimates": {
    "creation": {
      "codeDepositCost": "1859400",
      "executionCost": "infinite",
      "totalCost": "infinite"
    },
    "external": {
      "api3Pool()": "1092",
      "api3Token()": "infinite",
      "getRemainingAmount(address)": "1290",
      "getTimelock(address)": "3776",
      "getWithdrawable(address)": "infinite",
      "owner()": "1077",
      "renounceOwnership()": "24358",
      "timelocks(address)": "3703",
      "transferAndLock(address,address,uint256,uint256,uint256)": "infinite",
      "transferAndLockMultiple(address,address[],uint256[],uint256[],uint256[])": "infinite",
      "transferOwnership(address)": "infinite",
      "updateApi3Pool(address)": "23121",
      "withdraw(address)": "infinite",
      "withdrawToPool(address,address)": "infinite"
    },
    "internal": {
      "getUnlocked(address)": "infinite"
    }
  }
}