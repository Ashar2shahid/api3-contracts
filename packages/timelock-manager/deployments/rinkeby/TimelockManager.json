{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "api3TokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "timelockManagerOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "api3PoolAddress",
          "type": "address"
        }
      ],
      "name": "Api3PoolUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "indTimelock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "TimelockReversed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "indTimelock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releaseTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "reversible",
          "type": "bool"
        }
      ],
      "name": "TransferredAndLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "indTimelock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "indTimelock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "api3PoolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "WithdrawnToPool",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "api3Pool",
      "outputs": [
        {
          "internalType": "contract IApi3Pool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "api3Token",
      "outputs": [
        {
          "internalType": "contract IApi3Token",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "indTimelock",
          "type": "uint256"
        }
      ],
      "name": "getTimelock",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releaseTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "reversible",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTimelocks",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "releaseTimes",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "reversibles",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "noTimelocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "indTimelock",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "reverseTimelock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "indTimelocks",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "reverseTimelockMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "timelocks",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releaseTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "reversible",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releaseTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "reversible",
          "type": "bool"
        }
      ],
      "name": "transferAndLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "releaseTimes",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "reversibles",
          "type": "bool[]"
        }
      ],
      "name": "transferAndLockMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "api3PoolAddress",
          "type": "address"
        }
      ],
      "name": "updateApi3Pool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "indTimelock",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "indTimelock",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "api3PoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "withdrawToPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "receipt": {
    "to": null,
    "from": "0x1Da10cDEc44538E1854791b8e71FA4Ef05b4b238",
    "contractAddress": "0x7B35bF1954a428B4C2fc04a253a2aa950CB96e6C",
    "transactionIndex": 5,
    "gasUsed": "2479268",
    "logsBloom": "0x
    "blockHash": "0xe94a2d44dcca3306b3ef4487b30e124387cc9021bdc08b500a73ab5cfe645d6b",
    "transactionHash": "0x4884dfefd264f6462efae58676fe0604494b164f1c37b1b963e322885d5f9d2d",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 7281293,
        "transactionHash": "0x4884dfefd264f6462efae58676fe0604494b164f1c37b1b963e322885d5f9d2d",
        "address": "0x7B35bF1954a428B4C2fc04a253a2aa950CB96e6C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001da10cdec44538e1854791b8e71fa4ef05b4b238"
        ],
        "data": "0x",
        "logIndex": 85,
        "blockHash": "0xe94a2d44dcca3306b3ef4487b30e124387cc9021bdc08b500a73ab5cfe645d6b"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 7281293,
        "transactionHash": "0x4884dfefd264f6462efae58676fe0604494b164f1c37b1b963e322885d5f9d2d",
        "address": "0x7B35bF1954a428B4C2fc04a253a2aa950CB96e6C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000001da10cdec44538e1854791b8e71fa4ef05b4b238",
          "0x0000000000000000000000000c26bb185ad09c5a41e8fd127bf7b8c99e81e5dc"
        ],
        "data": "0x",
        "logIndex": 86,
        "blockHash": "0xe94a2d44dcca3306b3ef4487b30e124387cc9021bdc08b500a73ab5cfe645d6b"
      }
    ],
    "blockNumber": 7281293,
    "cumulativeGasUsed": "4278608",
    "status": 1,
    "byzantium": true
  },
  "address": "0x7B35bF1954a428B4C2fc04a253a2aa950CB96e6C",
  "args": [
    "0x6B3998970db68A9Cb7Ab240017C20D22F08A3cC1",
    "0x0c26bb185ad09c5a41e8fd127bf7b8c99e81e5dc"
  ],
  "solcInputHash": "0x6523b4e46a27dce5ddf759135a3d1fc9d8cdea1926bb74b06fa883356c9d4661",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"api3TokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"timelockManagerOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"api3PoolAddress\",\"type\":\"address\"}],\"name\":\"Api3PoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"indTimelock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"TimelockReversed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"indTimelock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"reversible\",\"type\":\"bool\"}],\"name\":\"TransferredAndLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"indTimelock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"indTimelock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"api3PoolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"WithdrawnToPool\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"api3Pool\",\"outputs\":[{\"internalType\":\"contract IApi3Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"api3Token\",\"outputs\":[{\"internalType\":\"contract IApi3Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"indTimelock\",\"type\":\"uint256\"}],\"name\":\"getTimelock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"reversible\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimelocks\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"releaseTimes\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"reversibles\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noTimelocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"indTimelock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"reverseTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indTimelocks\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"reverseTimelockMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"timelocks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"reversible\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"reversible\",\"type\":\"bool\"}],\"name\":\"transferAndLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"releaseTimes\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"reversibles\",\"type\":\"bool[]\"}],\"name\":\"transferAndLockMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"api3PoolAddress\",\"type\":\"address\"}],\"name\":\"updateApi3Pool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"indTimelock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"indTimelock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"api3PoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawToPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"api3Pool is not initialized in the constructor because this contract will be deployed before api3Pool\",\"params\":{\"api3TokenAddress\":\"Address of the API3 token contract\",\"timelockManagerOwner\":\"Address that will receive the ownership of the TimelockManager contract (i.e., the API3 DAO)\"}},\"getTimelock(uint256)\":{\"returns\":{\"amount\":\"Amount of tokens\",\"owner\":\"Owner of tokens\",\"releaseTime\":\"Release time\",\"reversible\":\"Flag indicating if the timelock is reversible\"}},\"getTimelocks()\":{\"details\":\"This is a convenience method for the user to be able to retrieve all timelocks with a single call and loop through them to find the timelocks they are looking for. In case timelocks grow too large and this method starts reverting (not expected), the user can go through the events emitted during locking, or even go through individual indices using getTimelock().\",\"returns\":{\"amounts\":\"Amounts of tokens\",\"owners\":\"Owners of tokens\",\"releaseTimes\":\"Release times\",\"reversibles\":\"Array of flags indicating if the timelocks are reversible\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"reverseTimelock(uint256,address)\":{\"details\":\"The reversible field of the timelock must be true\",\"params\":{\"destination\":\"Address that will receive the tokens\",\"indTimelock\":\"Index of the timelock to be reversed\"}},\"reverseTimelockMultiple(uint256[],address)\":{\"details\":\"destination is expected to be a single address, i.e., the DAO\",\"params\":{\"destination\":\"Address that will receive the tokens\",\"indTimelocks\":\"Array of indices of timelocks to be reversed\"}},\"transferAndLock(address,address,uint256,uint256,bool)\":{\"details\":\"source needs to approve() this contract to transfer amount number of tokens beforehand. This method is put behind onlyOwner to prevent third parties from spamming timelocks (not an actual issue but it would be inconvenient to sift through).\",\"params\":{\"amount\":\"Amount of tokens\",\"owner\":\"Owner of tokens\",\"releaseTime\":\"Release time\",\"reversible\":\"Flag indicating if the timelock is reversible\",\"source\":\"Source of tokens\"}},\"transferAndLockMultiple(address,address[],uint256[],uint256[],bool[])\":{\"details\":\"source is expected to be a single address, i.e., the DAO\",\"params\":{\"amounts\":\"Array of amounts of tokens\",\"owners\":\"Array of owners of tokens\",\"releaseTimes\":\"Array of release times\",\"reversibles\":\"Array of flags indicating if the timelocks are reversible\",\"source\":\"Source of tokens\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateApi3Pool(address)\":{\"params\":{\"api3PoolAddress\":\"Address of the API3 pool contract\"}},\"withdraw(uint256,address)\":{\"params\":{\"destination\":\"Address that will receive the tokens\",\"indTimelock\":\"Index of the timelock to be withdrawn from\"}},\"withdrawToPool(uint256,address,address)\":{\"details\":\"We ask the user to provide api3PoolAddress as a form of verification, i.e., the user confirms that the API3 pool address set at this contract is correct\",\"params\":{\"api3PoolAddress\":\"Address of the API3 pool contract\",\"beneficiary\":\"Address that the tokens will be deposited to the pool contract on behalf of\",\"indTimelock\":\"Index of the timelock to be withdrawn from\"}}},\"title\":\"Contract that timelocks API3 tokens sent to it until the vesting period is over or the staking pool is operational\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getTimelock(uint256)\":{\"notice\":\"Returns the details of a timelock\"},\"getTimelocks()\":{\"notice\":\"Returns the details of all timelocks\"},\"reverseTimelock(uint256,address)\":{\"notice\":\"Cancels the timelock and sends the locked tokens to destination\"},\"reverseTimelockMultiple(uint256[],address)\":{\"notice\":\"Convenience function that calls reverseTimelock() multiple times\"},\"transferAndLock(address,address,uint256,uint256,bool)\":{\"notice\":\"Transfers amount number of API3 tokens to this contract to be received by their owner after releaseTime\"},\"transferAndLockMultiple(address,address[],uint256[],uint256[],bool[])\":{\"notice\":\"Convenience function that calls transferAndLock() multiple times\"},\"updateApi3Pool(address)\":{\"notice\":\"Allows the owner (i.e., API3 DAO) to set the address of api3Pool, which token owners can transfer their tokens to\"},\"withdraw(uint256,address)\":{\"notice\":\"Used by the owner to withdraw tokens kept by a specific timelock\"},\"withdrawToPool(uint256,address,address)\":{\"notice\":\"Used by the owner to withdraw their tokens kept by a specific timelock to the API3 pool\"}},\"notice\":\"The owner of TimelockManager (i.e., API3 DAO) can send tokens to TimelockManager to be timelocked until releaseTime. After releaseTime, the respective owner can withdraw the tokens. Alternatively, if the owner of this contract sets api3Pool, the token owners can transfer their tokens from TimelockManager to api3Pool before releaseTime. These tokens will be not be withdrawable from api3Pool until their respective releaseTimes. API3 DAO can also reverse timelocks (i.e., annul them) and send the tokens to a destination of its choice. Note that timelocks can be specified not to be reversible.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TimelockManager.sol\":\"TimelockManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@api3-contracts/api3-pool/contracts/interfaces/IApi3Pool.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"./ITransferUtils.sol\\\";\\n\\n\\ninterface IApi3Pool is ITransferUtils {}\\n\",\"keccak256\":\"0xda4c76fe47c59f29b526497fc0ec26757f8e02a95bf37ff42c44db72744dd86b\",\"license\":\"MIT\"},\"@api3-contracts/api3-pool/contracts/interfaces/IApi3State.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IApi3State {\\n    enum ClaimStatus { Pending, Accepted, Denied }\\n\\n    event InflationManagerUpdated(address inflationManagerAddress);\\n    event ClaimsManagerUpdated(address claimsManagerAddress);\\n    event RewardVestingPeriodUpdated(uint256 rewardVestingPeriod);\\n    event UnpoolRequestCooldownUpdated(uint256 unpoolRequestCooldown);\\n    event UnpoolWaitingPeriodUpdated(uint256 unpoolWaitingPeriod);\\n\\n    function updateInflationManager(address inflationManagerAddress)\\n        external;\\n\\n    function updateClaimsManager(address claimsManagerAddress)\\n        external;\\n\\n    function updateRewardVestingPeriod(uint256 _rewardVestingPeriod)\\n        external;\\n\\n    function updateUnpoolRequestCooldown(uint256 _unpoolRequestCooldown)\\n        external;\\n\\n    function updateUnpoolWaitingPeriod(uint256 _unpoolWaitingPeriod)\\n        external;\\n}\\n\",\"keccak256\":\"0x7cc63cdf2f2e7673076a91433fde1a0f73ad943ab73b14e6ecfe96f13efa70f8\",\"license\":\"MIT\"},\"@api3-contracts/api3-pool/contracts/interfaces/IClaimUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"./IGetterUtils.sol\\\";\\n\\n\\ninterface IClaimUtils is IGetterUtils {\\n    event ClaimCreated(\\n        bytes32 indexed claimId,\\n        address indexed beneficiary,\\n        uint256 amount\\n        );\\n\\n    event ClaimAccepted(bytes32 indexed claimId);\\n\\n    event ClaimDenied(bytes32 indexed claimId);\\n\\n    function createClaim(\\n        address beneficiary,\\n        uint256 amount\\n        )\\n        external;\\n\\n    function acceptClaim(bytes32 claimId)\\n        external;\\n\\n    function denyClaim(bytes32 claimId)\\n        external;\\n}\\n\",\"keccak256\":\"0x27ca9d3a6ea5c35497cb8d437990e5ebb669aeb465fff3b8682788447fac6cc9\",\"license\":\"MIT\"},\"@api3-contracts/api3-pool/contracts/interfaces/IEpochUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"./IApi3State.sol\\\";\\n\\n\\ninterface IEpochUtils is IApi3State {\\n    function getCurrentEpochIndex()\\n        external\\n        view\\n        returns(uint256 currentEpochIndex);\\n\\n    function getEpochIndex(uint256 timestamp)\\n        external\\n        view\\n        returns(uint256 epochIndex);\\n}\\n\",\"keccak256\":\"0x7c203025715c06d0c75c90173fb73247eec386f066ae142155d2553102387fb4\",\"license\":\"MIT\"},\"@api3-contracts/api3-pool/contracts/interfaces/IGetterUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"./IEpochUtils.sol\\\";\\n\\n\\ninterface IGetterUtils is IEpochUtils {\\n    function getPooled(address userAddress)\\n        external\\n        view\\n        returns(uint256 pooled);\\n\\n    function getVotingPower(\\n        address delegate,\\n        uint256 timestamp\\n        )\\n        external\\n        view\\n        returns(uint256 votingPower);\\n\\n    function getTotalRealPooled()\\n        external\\n        view\\n        returns(uint256 totalRealPooled);\\n\\n    function getBalance(address userAddress)\\n        external\\n        view\\n        returns(uint256 balance);\\n\\n    function getShare(address userAddress)\\n        external\\n        view\\n        returns(uint256 share);\\n\\n    function getUnpoolRequestEpoch(address userAddress)\\n        external\\n        view\\n        returns(uint256 unpoolRequestEpoch);\\n\\n    function getTotalStaked(uint256 epochIndex)\\n        external\\n        view\\n        returns(uint256 totalStaked);\\n\\n    function getStaked(\\n        address userAddress,\\n        uint256 epochIndex\\n        )\\n        external\\n        view\\n        returns(uint256 staked);\\n\\n    function getDelegate(address userAddress)\\n        external\\n        view\\n        returns(address delegate);\\n\\n    function getDelegated(\\n        address delegate,\\n        uint256 epochIndex\\n        )\\n        external\\n        view\\n        returns(uint256 delegated);\\n\\n    function getVestedRewards(uint256 epochIndex)\\n        external\\n        view\\n        returns(uint256 vestedRewards);\\n\\n    function getUnpaidVestedRewards(uint256 epochIndex)\\n        external\\n        view\\n        returns(uint256 unpaidVestedRewards);\\n\\n    function getInstantRewards(uint256 epochIndex)\\n        external\\n        view\\n        returns(uint256 instantRewards);\\n\\n    function getUnpaidInstantRewards(uint256 epochIndex)\\n        external\\n        view\\n        returns(uint256 unpaidInstantRewards);\\n\\n    function getVesting(bytes32 vestingId)\\n        external\\n        view\\n        returns(\\n            address userAddress,\\n            uint256 amount,\\n            uint256 epoch\\n            );\\n\\n    function getUnvestedFund(address userAddress)\\n        external\\n        view\\n        returns(uint256 unvestedFund);\\n\\n    function getClaim(bytes32 claimId)\\n        external\\n        view\\n        returns(\\n            address beneficiary,\\n            uint256 amount,\\n            IApi3State.ClaimStatus status\\n            );\\n\\n    function getActiveClaims()\\n        external\\n        view\\n        returns(bytes32[] memory _activeClaims);\\n\\n    function getIou(bytes32 iouId)\\n        external\\n        view\\n        returns(\\n            address userAddress,\\n            uint256 amountInShares,\\n            bytes32 claimId,\\n            IApi3State.ClaimStatus redemptionCondition\\n            );\\n}\\n\",\"keccak256\":\"0x61c8677f42921dd777c82ec6365586582c317e3a6a1ea809ee1757fb0dd10f92\",\"license\":\"MIT\"},\"@api3-contracts/api3-pool/contracts/interfaces/IIouUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"./IApi3State.sol\\\";\\nimport \\\"./IClaimUtils.sol\\\";\\n\\n\\ninterface IIouUtils is IClaimUtils {\\n    event IouCreated(\\n        bytes32 indexed iouId,\\n        address indexed userAddress,\\n        uint256 amountInShares,\\n        bytes32 indexed claimId,\\n        IApi3State.ClaimStatus redemptionCondition\\n        );\\n\\n    event IouRedeemed(bytes32 indexed iouId, uint256 amount);\\n\\n    event IouDeleted(bytes32 indexed iouId);\\n\\n    function redeem(bytes32 iouId)\\n        external;\\n}\\n\",\"keccak256\":\"0x4e469f6073d6834d5f9273eec990b07ce01aa323dd391a61b3bd5432f693c5d1\",\"license\":\"MIT\"},\"@api3-contracts/api3-pool/contracts/interfaces/IPoolUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"./IStakeUtils.sol\\\";\\n\\n\\ninterface IPoolUtils is IStakeUtils {\\n    event Pooled(\\n        address indexed userAddress,\\n        uint256 amount,\\n        uint256 amountInShares\\n        );\\n    \\n    event RequestedToUnpool(address indexed userAddress);\\n\\n    event Unpooled(\\n        address indexed userAddress,\\n        uint256 amount,\\n        uint256 amountInShares\\n    );\\n\\n    function pool(uint256 amount)\\n        external;\\n\\n    function requestToUnpool()\\n        external;\\n\\n    function unpool(uint256 amountInShares)\\n        external;\\n}\\n\",\"keccak256\":\"0x1cb43bdd0b41116ba60606491da2c155c874ba788ae5996b4a7ff0c7da3bed41\",\"license\":\"MIT\"},\"@api3-contracts/api3-pool/contracts/interfaces/IStakeUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"./IVestingUtils.sol\\\";\\n\\n\\ninterface IStakeUtils is IVestingUtils {\\n    event Staked(\\n        address indexed userAddress,\\n        uint256 amountInShares\\n        );\\n    \\n    event UpdatedDelegate(\\n        address indexed userAddress,\\n        address indexed delegate\\n        );\\n\\n    event Collected(\\n        address indexed userAddress,\\n        uint256 vestedRewards,\\n        uint256 instantRewards\\n        );\\n\\n    function stake(address userAddress)\\n        external;\\n\\n    function updateDelegate(address delegate)\\n        external;\\n\\n    function collect(address userAddress)\\n        external;\\n}\\n\",\"keccak256\":\"0xd5d14995a93249578d7bbc0e9d30de7dd8d49779f62f4978820503cb1930ea94\",\"license\":\"MIT\"},\"@api3-contracts/api3-pool/contracts/interfaces/ITransferUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"./IPoolUtils.sol\\\";\\n\\n\\ninterface ITransferUtils is IPoolUtils {\\n    event Deposited(\\n        address indexed sourceAddress,\\n        uint256 amount,\\n        address indexed userAddress\\n        );\\n    \\n    event DepositedWithVesting(\\n        address indexed sourceAddress,\\n        uint256 amount,\\n        address indexed userAddress,\\n        uint256 vestingEpoch\\n        );\\n    \\n    event Withdrawn(\\n        address indexed userAddress,\\n        address destinationAddress,\\n        uint256 amount\\n        );\\n    \\n    event AddedVestedRewards(\\n        address indexed sourceAddress,\\n        uint256 amount,\\n        uint256 indexed epochIndex\\n        );\\n    \\n    event AddedInstantRewards(\\n        address indexed sourceAddress,\\n        uint256 amount,\\n        uint256 indexed epochIndex\\n        );\\n\\n    function deposit(\\n        address sourceAddress,\\n        uint256 amount,\\n        address userAddress\\n        )\\n        external;\\n\\n    function depositWithVesting(\\n        address sourceAddress,\\n        uint256 amount,\\n        address userAddress,\\n        uint256 vestingTimestamp\\n        )\\n        external;\\n\\n    function withdraw(\\n        address destinationAddress,\\n        uint256 amount\\n        )\\n        external;\\n\\n    function addVestedRewards(\\n        address sourceAddress,\\n        uint256 amount\\n        )\\n        external;\\n\\n    function addInstantRewards(\\n        address sourceAddress,\\n        uint256 amount\\n        )\\n        external;\\n}\\n\",\"keccak256\":\"0x2010d2853aa9a92469dede22ed68bbfaaedb133dfb343c955a2ec2160319a2bb\",\"license\":\"MIT\"},\"@api3-contracts/api3-pool/contracts/interfaces/IVestingUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"./IIouUtils.sol\\\";\\n\\n\\ninterface IVestingUtils is IIouUtils {\\n    event VestingCreated(\\n        bytes32 indexed vestingId,\\n        address indexed userAddress,\\n        uint256 amount,\\n        uint256 vestingEpoch\\n        );\\n\\n    event VestingResolved(bytes32 indexed vestingId);\\n\\n    function vest(bytes32 vestingId)\\n        external;\\n}\\n\",\"keccak256\":\"0x3cea7aa5634935299c61a73c4f7f7623db85d1a6d6c0abbbd9af926a34f7a020\",\"license\":\"MIT\"},\"@api3-contracts/api3-token/contracts/interfaces/IApi3Token.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IApi3Token is IERC20 {\\n    event MinterStatusUpdated(\\n        address indexed minterAddress,\\n        bool minterStatus\\n        );\\n\\n    function updateMinterStatus(\\n        address minterAddress,\\n        bool minterStatus\\n        )\\n        external;\\n\\n    function mint(\\n        address account,\\n        uint256 amount\\n        )\\n        external;\\n\\n    function getMinterStatus(address minterAddress)\\n        external\\n        view\\n        returns(bool minterStatus);\\n}\\n\",\"keccak256\":\"0x1fa7fe2f89197ed4ceb62f921ec2679207ed26dc103ee4f1858d944d67db2ed5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x4bd6402ca6b3419008c2b482aff54e66836e8cb4eba2680e42ac5884ae6424fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5c26b39d26f7ed489e555d955dcd3e01872972e71fdd1528e93ec164e4f23385\",\"license\":\"MIT\"},\"contracts/TimelockManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@api3-contracts/api3-token/contracts/interfaces/IApi3Token.sol\\\";\\nimport \\\"@api3-contracts/api3-pool/contracts/interfaces/IApi3Pool.sol\\\";\\nimport \\\"./interfaces/ITimelockManager.sol\\\";\\n\\n\\n/// @title Contract that timelocks API3 tokens sent to it until the vesting\\n/// period is over or the staking pool is operational\\n/// @notice The owner of TimelockManager (i.e., API3 DAO) can send tokens to\\n/// TimelockManager to be timelocked until releaseTime. After releaseTime, the\\n/// respective owner can withdraw the tokens.\\n/// Alternatively, if the owner of this contract sets api3Pool, the token\\n/// owners can transfer their tokens from TimelockManager to api3Pool before\\n/// releaseTime. These tokens will be not be withdrawable from api3Pool until\\n/// their respective releaseTimes.\\n/// API3 DAO can also reverse timelocks (i.e., annul them) and send the tokens\\n/// to a destination of its choice. Note that timelocks can be specified not to\\n/// be reversible.\\ncontract TimelockManager is Ownable, ITimelockManager {\\n    using SafeMath for uint256;\\n\\n    struct Timelock {\\n        address owner;\\n        uint256 amount;\\n        uint256 releaseTime;\\n        bool reversible;\\n        }\\n\\n    IApi3Token public immutable api3Token;\\n    IApi3Pool public api3Pool;\\n    mapping(uint256 => Timelock) public timelocks;\\n    uint256 public noTimelocks = 0;\\n\\n    /// @dev api3Pool is not initialized in the constructor because this\\n    /// contract will be deployed before api3Pool\\n    /// @param api3TokenAddress Address of the API3 token contract\\n    /// @param timelockManagerOwner Address that will receive the ownership of\\n    /// the TimelockManager contract (i.e., the API3 DAO)\\n    constructor(\\n        address api3TokenAddress,\\n        address timelockManagerOwner\\n        )\\n        public\\n    {\\n        api3Token = IApi3Token(api3TokenAddress);\\n        transferOwnership(timelockManagerOwner);\\n    }\\n\\n    /// @notice Allows the owner (i.e., API3 DAO) to set the address of\\n    /// api3Pool, which token owners can transfer their tokens to\\n    /// @param api3PoolAddress Address of the API3 pool contract\\n    function updateApi3Pool(address api3PoolAddress)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        api3Pool = IApi3Pool(api3PoolAddress);\\n        emit Api3PoolUpdated(api3PoolAddress);\\n    }\\n\\n    /// @notice Transfers amount number of API3 tokens to this contract to be\\n    /// received by their owner after releaseTime\\n    /// @dev source needs to approve() this contract to transfer amount number\\n    /// of tokens beforehand.\\n    /// This method is put behind onlyOwner to prevent third parties from\\n    /// spamming timelocks (not an actual issue but it would be inconvenient\\n    /// to sift through).\\n    /// @param source Source of tokens\\n    /// @param owner Owner of tokens\\n    /// @param amount Amount of tokens\\n    /// @param releaseTime Release time\\n    /// @param reversible Flag indicating if the timelock is reversible\\n    function transferAndLock(\\n        address source,\\n        address owner,\\n        uint256 amount,\\n        uint256 releaseTime,\\n        bool reversible\\n        )\\n        public\\n        override\\n        onlyOwner\\n    {\\n        require(amount != 0, \\\"Transferred and locked amount cannot be 0\\\");\\n        timelocks[noTimelocks] = Timelock({\\n            owner: owner,\\n            amount: amount,\\n            releaseTime: releaseTime,\\n            reversible: reversible\\n            });\\n        emit TransferredAndLocked(\\n            noTimelocks,\\n            source,\\n            owner,\\n            amount,\\n            releaseTime,\\n            reversible\\n            );\\n        noTimelocks = noTimelocks.add(1);\\n        require(\\n            api3Token.transferFrom(source, address(this), amount),\\n            \\\"API3 token transferFrom failed\\\"\\n            );\\n    }\\n\\n    /// @notice Convenience function that calls transferAndLock() multiple times\\n    /// @dev source is expected to be a single address, i.e., the DAO\\n    /// @param source Source of tokens\\n    /// @param owners Array of owners of tokens\\n    /// @param amounts Array of amounts of tokens\\n    /// @param releaseTimes Array of release times\\n    /// @param reversibles Array of flags indicating if the timelocks are\\n    /// reversible\\n    function transferAndLockMultiple(\\n        address source,\\n        address[] calldata owners,\\n        uint256[] calldata amounts,\\n        uint256[] calldata releaseTimes,\\n        bool[] calldata reversibles\\n        )\\n        external\\n        override\\n        onlyOwner\\n        onlyIfParameterLengthIsShortEnough(owners.length)\\n    {\\n        require(\\n            owners.length == amounts.length\\n                && owners.length == releaseTimes.length\\n                && owners.length == reversibles.length,\\n            \\\"Lengths of parameters do not match\\\"\\n            );\\n        for (uint256 ind = 0; ind < owners.length; ind++)\\n        {\\n            transferAndLock(source, owners[ind], amounts[ind], releaseTimes[ind], reversibles[ind]);\\n        }\\n    }\\n\\n    /// @notice Cancels the timelock and sends the locked tokens to destination\\n    /// @dev The reversible field of the timelock must be true\\n    /// @param indTimelock Index of the timelock to be reversed\\n    /// @param destination Address that will receive the tokens\\n    function reverseTimelock(\\n        uint256 indTimelock,\\n        address destination\\n        )\\n        public\\n        override\\n        onlyOwner\\n        onlyIfTimelockWithIndexExists(indTimelock)\\n        onlyIfDestinationIsValid(destination)\\n    {\\n        Timelock memory timelock = timelocks[indTimelock];\\n        require(\\n            timelock.reversible,\\n            \\\"Timelock is not reversible\\\"\\n            );\\n        require(\\n            timelock.amount != 0,\\n            \\\"Timelock is already withdrawn\\\"\\n            );\\n        // Do not check if msg.sender is the timelock owner\\n        // Do not check if the timelock has matured\\n        delete timelocks[indTimelock].amount;\\n        emit TimelockReversed(\\n            indTimelock,\\n            destination\\n            );\\n        require(\\n            api3Token.transfer(destination, timelock.amount),\\n            \\\"API3 token transfer failed\\\"\\n            );\\n    }\\n\\n    /// @notice Convenience function that calls reverseTimelock() multiple times\\n    /// @dev destination is expected to be a single address, i.e., the DAO\\n    /// @param indTimelocks Array of indices of timelocks to be reversed\\n    /// @param destination Address that will receive the tokens\\n    function reverseTimelockMultiple(\\n        uint256[] calldata indTimelocks,\\n        address destination\\n        )\\n        external\\n        override\\n        onlyOwner\\n        onlyIfParameterLengthIsShortEnough(indTimelocks.length)\\n    {\\n        for (uint256 ind = 0; ind < indTimelocks.length; ind++)\\n        {\\n            reverseTimelock(indTimelocks[ind], destination);\\n        }\\n    }\\n\\n    /// @notice Used by the owner to withdraw tokens kept by a specific\\n    /// timelock\\n    /// @param indTimelock Index of the timelock to be withdrawn from\\n    /// @param destination Address that will receive the tokens\\n    function withdraw(\\n        uint256 indTimelock,\\n        address destination\\n        )\\n        external\\n        override\\n        onlyIfTimelockWithIndexExists(indTimelock)\\n        onlyIfDestinationIsValid(destination)\\n    {\\n        Timelock memory timelock = timelocks[indTimelock];\\n        require(\\n            timelock.amount != 0,\\n            \\\"Timelock is already withdrawn\\\"\\n            );\\n        require(\\n            msg.sender == timelock.owner,\\n            \\\"Only the owner of the timelock can withdraw from it\\\"\\n            );\\n        require(\\n            now > timelock.releaseTime,\\n            \\\"Timelock has not matured yet\\\"\\n            );\\n        delete timelocks[indTimelock].amount;\\n        emit Withdrawn(\\n            indTimelock,\\n            destination\\n            );\\n        require(\\n            api3Token.transfer(destination, timelock.amount),\\n            \\\"API3 token transfer failed\\\"\\n            );\\n    }\\n\\n    /// @notice Used by the owner to withdraw their tokens kept by a specific\\n    /// timelock to the API3 pool\\n    /// @dev We ask the user to provide api3PoolAddress as a form of\\n    /// verification, i.e., the user confirms that the API3 pool address set at\\n    /// this contract is correct\\n    /// @param indTimelock Index of the timelock to be withdrawn from\\n    /// @param api3PoolAddress Address of the API3 pool contract\\n    /// @param beneficiary Address that the tokens will be deposited to the\\n    /// pool contract on behalf of\\n    function withdrawToPool(\\n        uint256 indTimelock,\\n        address api3PoolAddress,\\n        address beneficiary\\n        )\\n        external\\n        override\\n        onlyIfTimelockWithIndexExists(indTimelock)\\n    {\\n        require(\\n            beneficiary != address(0),\\n            \\\"Cannot withdraw to benefit address 0\\\"\\n            );\\n        require(address(api3Pool) != address(0), \\\"API3 pool not set yet\\\");\\n        require(\\n            address(api3Pool) == api3PoolAddress,\\n            \\\"API3 pool addresses do not match\\\"\\n            );\\n        Timelock memory timelock = timelocks[indTimelock];\\n        require(\\n            timelock.amount != 0,\\n            \\\"Timelock is already withdrawn\\\"\\n            );\\n        require(\\n            msg.sender == timelock.owner,\\n            \\\"Only the owner of the timelock can withdraw from it\\\"\\n            );\\n        // Do not check if the timelock has matured\\n        delete timelocks[indTimelock].amount;\\n        emit WithdrawnToPool(\\n            indTimelock,\\n            api3PoolAddress,\\n            beneficiary\\n            );\\n        api3Token.approve(address(api3Pool), timelock.amount);\\n        // If (now > timelock.releaseTime), the beneficiary can immediately\\n        // have their tokens vested at the pool with an additional transaction\\n        api3Pool.depositWithVesting(\\n            address(this),\\n            timelock.amount,\\n            beneficiary,\\n            timelock.releaseTime\\n            );\\n    }\\n\\n    /// @notice Returns the details of a timelock\\n    /// @return owner Owner of tokens\\n    /// @return amount Amount of tokens\\n    /// @return releaseTime Release time\\n    /// @return reversible Flag indicating if the timelock is reversible\\n    function getTimelock(uint256 indTimelock)\\n        external\\n        view\\n        override\\n        onlyIfTimelockWithIndexExists(indTimelock)\\n        returns (\\n            address owner,\\n            uint256 amount,\\n            uint256 releaseTime,\\n            bool reversible\\n            )\\n    {\\n        Timelock storage timelock = timelocks[indTimelock];\\n        owner = timelock.owner;\\n        amount = timelock.amount;\\n        releaseTime = timelock.releaseTime;\\n        reversible = timelock.reversible;\\n    }\\n\\n    /// @notice Returns the details of all timelocks\\n    /// @dev This is a convenience method for the user to be able to retrieve\\n    /// all timelocks with a single call and loop through them to find the\\n    /// timelocks they are looking for. In case timelocks grow too large and\\n    /// this method starts reverting (not expected), the user can go through\\n    /// the events emitted during locking, or even go through individual\\n    /// indices using getTimelock().\\n    /// @return owners Owners of tokens\\n    /// @return amounts Amounts of tokens\\n    /// @return releaseTimes Release times\\n    /// @return reversibles Array of flags indicating if the timelocks are\\n    /// reversible\\n    function getTimelocks()\\n        external\\n        view\\n        override\\n        returns (\\n            address[] memory owners,\\n            uint256[] memory amounts,\\n            uint256[] memory releaseTimes,\\n            bool[] memory reversibles\\n            )\\n    {\\n        owners = new address[](noTimelocks);\\n        amounts = new uint256[](noTimelocks);\\n        releaseTimes = new uint256[](noTimelocks);\\n        reversibles = new bool[](noTimelocks);\\n        for (uint256 ind = 0; ind < noTimelocks; ind++)\\n        {\\n            Timelock storage timelock = timelocks[ind];\\n            owners[ind] = timelock.owner;\\n            amounts[ind] = timelock.amount;\\n            releaseTimes[ind] = timelock.releaseTime;\\n            reversibles[ind] = timelock.reversible;\\n        }\\n    }\\n\\n    /// @dev Reverts if a timelock with index indTimelock does not exist\\n    modifier onlyIfTimelockWithIndexExists(uint256 indTimelock)\\n    {\\n        require(\\n            indTimelock < noTimelocks,\\n            \\\"No such timelock exists\\\"\\n            );\\n        _;\\n    }\\n\\n    /// @dev Reverts if the parameter array is longer than 30\\n    modifier onlyIfParameterLengthIsShortEnough(uint256 parameterLength)\\n    {\\n        require(\\n            parameterLength <= 30,\\n            \\\"Parameters are longer than 30\\\"\\n            );\\n        _;\\n    }\\n\\n    /// @dev Reverts if the destination is address(0)\\n    modifier onlyIfDestinationIsValid(address destination)\\n    {\\n        require(\\n            destination != address(0),\\n            \\\"Cannot withdraw to address 0\\\"\\n            );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x0cc5520e824c0c7884830b6fa021ca8b220991079df0a89688cbf9c67e701053\",\"license\":\"MIT\"},\"contracts/interfaces/ITimelockManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n\\ninterface ITimelockManager {\\n    event Api3PoolUpdated(address api3PoolAddress);\\n\\n    event TransferredAndLocked(\\n        uint256 indexed indTimelock,\\n        address source,\\n        address indexed owner,\\n        uint256 amount,\\n        uint256 releaseTime,\\n        bool reversible\\n    );\\n\\n    event TimelockReversed(\\n        uint256 indexed indTimelock,\\n        address destination\\n    );\\n\\n    event Withdrawn(\\n        uint256 indexed indTimelock,\\n        address destination\\n    );\\n\\n    event WithdrawnToPool(\\n        uint256 indexed indTimelock,\\n        address api3PoolAddress,\\n        address beneficiary\\n    );\\n\\n    function updateApi3Pool(address api3PoolAddress)\\n        external;\\n\\n    function transferAndLock(\\n        address source,\\n        address owner,\\n        uint256 amount,\\n        uint256 releaseTime,\\n        bool reversible\\n        )\\n        external;\\n\\n    function transferAndLockMultiple(\\n        address source,\\n        address[] calldata owners,\\n        uint256[] calldata amounts,\\n        uint256[] calldata releaseTimes,\\n        bool[] calldata reversibles\\n        )\\n        external;\\n\\n    function reverseTimelock(\\n        uint256 indTimelock,\\n        address destination\\n        )\\n        external;\\n\\n    function reverseTimelockMultiple(\\n        uint256[] calldata indTimelocks,\\n        address destination\\n        )\\n        external;\\n\\n    function withdraw(\\n        uint256 indTimelock,\\n        address destination\\n        )\\n        external;\\n\\n    function withdrawToPool(\\n        uint256 indTimelock,\\n        address api3PoolAddress,\\n        address beneficiary\\n        )\\n        external;\\n\\n    function getTimelock(uint256 indTimelock)\\n        external\\n        view\\n        returns (\\n            address owner,\\n            uint256 amount,\\n            uint256 releaseTime,\\n            bool reversibles\\n            );\\n\\n    function getTimelocks()\\n        external\\n        view\\n        returns (\\n            address[] memory owners,\\n            uint256[] memory amounts,\\n            uint256[] memory releaseTimes,\\n            bool[] memory reversibles\\n            );\\n}\",\"keccak256\":\"0xb2ab8602c762caa5cf336048a957e7bf58106630588bf5d374ea832575226e28\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405260006003553480156200001657600080fd5b5060405162002f2638038062002f26833981810160405260408110156200003c57600080fd5b8101908080519060200190929190805190602001909291905050506000620000696200015760201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3508173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250506200014f816200015f60201b60201c565b505062000375565b600033905090565b6200016f6200015760201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161462000230576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620002b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018062002f006026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60805160601c612b59620003a760003980610bd352806111645280611b2a5280611cfd528061282a5250612b596000f3fe608060405234801561001057600080fd5b50600436106100ff5760003560e01c80636fe2a2d711610097578063ac557fcd11610066578063ac557fcd146105a6578063ec306c601461073e578063f2fde38b1461075c578063f9996a7e146107a0576100ff565b80636fe2a2d7146103fd578063715018a6146104315780638da5cb5b1461043b57806390380dcf1461046f576100ff565b806321d597b1116100d357806321d597b11461027e578063355efbed1461031757806356dba5ce1461035b578063613d517d146103c9576100ff565b8062f714ce146101045780630d7e149f146101525780630d99afd2146101c157806310b184381461020f575b600080fd5b6101506004803603604081101561011a57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610824565b005b61017e6004803603602081101561016857600080fd5b8101908080359060200190929190505050610d1a565b604051808573ffffffffffffffffffffffffffffffffffffffff168152602001848152602001838152602001821515815260200194505050505060405180910390f35b61020d600480360360408110156101d757600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d77565b005b61023b6004803603602081101561022557600080fd5b81019080803590602001909291905050506112ab565b604051808573ffffffffffffffffffffffffffffffffffffffff168152602001848152602001838152602001821515815260200194505050505060405180910390f35b6103156004803603604081101561029457600080fd5b81019080803590602001906401000000008111156102b157600080fd5b8201836020820111156102c357600080fd5b803590602001918460208302840111640100000000831117156102e557600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611392565b005b6103596004803603602081101561032d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611513565b005b6103c76004803603606081101561037157600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061166c565b005b6103d1611cfb565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610405611d1f565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610439611d45565b005b610443611ecb565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610477611ef4565b6040518080602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b838110156104c65780820151818401526020810190506104ab565b50505050905001858103845288818151815260200191508051906020019060200280838360005b838110156105085780820151818401526020810190506104ed565b50505050905001858103835287818151815260200191508051906020019060200280838360005b8381101561054a57808201518184015260208101905061052f565b50505050905001858103825286818151815260200191508051906020019060200280838360005b8381101561058c578082015181840152602081019050610571565b505050509050019850505050505050505060405180910390f35b61073c600480360360a08110156105bc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156105f957600080fd5b82018360208201111561060b57600080fd5b8035906020019184602083028401116401000000008311171561062d57600080fd5b90919293919293908035906020019064010000000081111561064e57600080fd5b82018360208201111561066057600080fd5b8035906020019184602083028401116401000000008311171561068257600080fd5b9091929391929390803590602001906401000000008111156106a357600080fd5b8201836020820111156106b557600080fd5b803590602001918460208302840111640100000000831117156106d757600080fd5b9091929391929390803590602001906401000000008111156106f857600080fd5b82018360208201111561070a57600080fd5b8035906020019184602083028401116401000000008311171561072c57600080fd5b9091929391929390505050612134565b005b61074661238c565b6040518082815260200191505060405180910390f35b61079e6004803603602081101561077257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612392565b005b610822600480360360a08110156107b657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080351515906020019092919050505061259d565b005b81600354811061089c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f4e6f20737563682074696d656c6f636b2065786973747300000000000000000081525060200191505060405180910390fd5b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610940576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f43616e6e6f7420776974686472617720746f206164647265737320300000000081525060200191505060405180910390fd5b610948612a1b565b600260008681526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1615151515815250509050600081602001511415610a68576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f54696d656c6f636b20697320616c72656164792077697468647261776e00000081525060200191505060405180910390fd5b806000015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610af0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526033815260200180612af16033913960400191505060405180910390fd5b80604001514211610b69576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f54696d656c6f636b20686173206e6f74206d617475726564207965740000000081525060200191505060405180910390fd5b6002600086815260200190815260200160002060010160009055847f8c7cdad0d12a8db3e23561b42da6f10c8137914c97beff202213a410e1f520a385604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a27f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8583602001516040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610c6657600080fd5b505af1158015610c7a573d6000803e3d6000fd5b505050506040513d6020811015610c9057600080fd5b8101908080519060200190929190505050610d13576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f4150493320746f6b656e207472616e73666572206661696c656400000000000081525060200191505060405180910390fd5b5050505050565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030160009054906101000a900460ff16905084565b610d7f61298b565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e3f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b816003548110610eb7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f4e6f20737563682074696d656c6f636b2065786973747300000000000000000081525060200191505060405180910390fd5b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f5b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f43616e6e6f7420776974686472617720746f206164647265737320300000000081525060200191505060405180910390fd5b610f63612a1b565b600260008681526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1615151515815250509050806060015161107f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f54696d656c6f636b206973206e6f742072657665727369626c6500000000000081525060200191505060405180910390fd5b6000816020015114156110fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f54696d656c6f636b20697320616c72656164792077697468647261776e00000081525060200191505060405180910390fd5b6002600086815260200190815260200160002060010160009055847f2a6815a0290e644ced00dbc993398130aab093f7dbf5f71bcb90ccfce3be95e685604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a27f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8583602001516040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156111f757600080fd5b505af115801561120b573d6000803e3d6000fd5b505050506040513d602081101561122157600080fd5b81019080805190602001909291905050506112a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f4150493320746f6b656e207472616e73666572206661696c656400000000000081525060200191505060405180910390fd5b5050505050565b600080600080846003548110611329576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f4e6f20737563682074696d656c6f636b2065786973747300000000000000000081525060200191505060405180910390fd5b60006002600088815260200190815260200160002090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16955080600101549450806002015493508060030160009054906101000a900460ff16925050509193509193565b61139a61298b565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461145a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b82829050601e8111156114d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f506172616d657465727320617265206c6f6e676572207468616e20333000000081525060200191505060405180910390fd5b60005b8484905081101561150c576114ff8585838181106114f257fe5b9050602002013584610d77565b80806001019150506114d8565b5050505050565b61151b61298b565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146115db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f9758fe2c5611eaaf02f90cf70038ecb1e23f3d218aed0b239a67c393d142767581604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b8260035481106116e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f4e6f20737563682074696d656c6f636b2065786973747300000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561176a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180612a5c6024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561182f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4150493320706f6f6c206e6f742073657420796574000000000000000000000081525060200191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146118f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4150493320706f6f6c2061646472657373657320646f206e6f74206d6174636881525060200191505060405180910390fd5b6118fa612a1b565b600260008681526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1615151515815250509050600081602001511415611a1a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f54696d656c6f636b20697320616c72656164792077697468647261776e00000081525060200191505060405180910390fd5b806000015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611aa2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526033815260200180612af16033913960400191505060405180910390fd5b6002600086815260200190815260200160002060010160009055847f81a6837dbf6f48671275432a84a0d9b444758a932923821086ae81f7211100ee8585604051808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a27f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683602001516040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611bdf57600080fd5b505af1158015611bf3573d6000803e3d6000fd5b505050506040513d6020811015611c0957600080fd5b810190808051906020019092919050505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663248335883083602001518685604001516040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001945050505050600060405180830381600087803b158015611cdc57600080fd5b505af1158015611cf0573d6000803e3d6000fd5b505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611d4d61298b565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611e0d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60608060608060035467ffffffffffffffff81118015611f1357600080fd5b50604051908082528060200260200182016040528015611f425781602001602082028036833780820191505090505b50935060035467ffffffffffffffff81118015611f5e57600080fd5b50604051908082528060200260200182016040528015611f8d5781602001602082028036833780820191505090505b50925060035467ffffffffffffffff81118015611fa957600080fd5b50604051908082528060200260200182016040528015611fd85781602001602082028036833780820191505090505b50915060035467ffffffffffffffff81118015611ff457600080fd5b506040519080825280602002602001820160405280156120235781602001602082028036833780820191505090505b50905060005b60035481101561212d5760006002600083815260200190815260200160002090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686838151811061207b57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080600101548583815181106120c657fe5b60200260200101818152505080600201548483815181106120e357fe5b6020026020010181815250508060030160009054906101000a900460ff1683838151811061210d57fe5b602002602001019015159081151581525050508080600101915050612029565b5090919293565b61213c61298b565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146121fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b87879050601e811115612277576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f506172616d657465727320617265206c6f6e676572207468616e20333000000081525060200191505060405180910390fd5b868690508989905014801561229157508484905089899050145b80156122a257508282905089899050145b6122f7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180612acf6022913960400191505060405180910390fd5b60005b8989905081101561237f576123728b8b8b8481811061231557fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168a8a8581811061233e57fe5b9050602002013589898681811061235157fe5b9050602002013588888781811061236457fe5b90506020020135151561259d565b80806001019150506122fa565b5050505050505050505050565b60035481565b61239a61298b565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461245a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156124e0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180612a806026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6125a561298b565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612665576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b60008314156126bf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526029815260200180612aa66029913960400191505060405180910390fd5b60405180608001604052808573ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182151581525060026000600354815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030160006101000a81548160ff0219169083151502179055509050508373ffffffffffffffffffffffffffffffffffffffff166003547fd6dee15d3b10a38d2d32a8e3c80146329a8f14e38e4694083b2be45a27ca854187868686604051808573ffffffffffffffffffffffffffffffffffffffff168152602001848152602001838152602001821515815260200194505050505060405180910390a3612822600160035461299390919063ffffffff16565b6003819055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd8630866040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156128d757600080fd5b505af11580156128eb573d6000803e3d6000fd5b505050506040513d602081101561290157600080fd5b8101908080519060200190929190505050612984576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f4150493320746f6b656e207472616e7366657246726f6d206661696c6564000081525060200191505060405180910390fd5b5050505050565b600033905090565b600080828401905083811015612a11576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600015158152509056fe43616e6e6f7420776974686472617720746f2062656e65666974206164647265737320304f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573735472616e7366657272656420616e64206c6f636b656420616d6f756e742063616e6e6f7420626520304c656e67746873206f6620706172616d657465727320646f206e6f74206d617463684f6e6c7920746865206f776e6572206f66207468652074696d656c6f636b2063616e2077697468647261772066726f6d206974a2646970667358221220132cc8911dff2214abed27cc82c81411595859c21fbb22590c943a9480fa0eca64736f6c634300060c00334f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "api3Pool is not initialized in the constructor because this contract will be deployed before api3Pool",
        "params": {
          "api3TokenAddress": "Address of the API3 token contract",
          "timelockManagerOwner": "Address that will receive the ownership of the TimelockManager contract (i.e., the API3 DAO)"
        }
      },
      "getTimelock(uint256)": {
        "returns": {
          "amount": "Amount of tokens",
          "owner": "Owner of tokens",
          "releaseTime": "Release time",
          "reversible": "Flag indicating if the timelock is reversible"
        }
      },
      "getTimelocks()": {
        "details": "This is a convenience method for the user to be able to retrieve all timelocks with a single call and loop through them to find the timelocks they are looking for. In case timelocks grow too large and this method starts reverting (not expected), the user can go through the events emitted during locking, or even go through individual indices using getTimelock().",
        "returns": {
          "amounts": "Amounts of tokens",
          "owners": "Owners of tokens",
          "releaseTimes": "Release times",
          "reversibles": "Array of flags indicating if the timelocks are reversible"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "reverseTimelock(uint256,address)": {
        "details": "The reversible field of the timelock must be true",
        "params": {
          "destination": "Address that will receive the tokens",
          "indTimelock": "Index of the timelock to be reversed"
        }
      },
      "reverseTimelockMultiple(uint256[],address)": {
        "details": "destination is expected to be a single address, i.e., the DAO",
        "params": {
          "destination": "Address that will receive the tokens",
          "indTimelocks": "Array of indices of timelocks to be reversed"
        }
      },
      "transferAndLock(address,address,uint256,uint256,bool)": {
        "details": "source needs to approve() this contract to transfer amount number of tokens beforehand. This method is put behind onlyOwner to prevent third parties from spamming timelocks (not an actual issue but it would be inconvenient to sift through).",
        "params": {
          "amount": "Amount of tokens",
          "owner": "Owner of tokens",
          "releaseTime": "Release time",
          "reversible": "Flag indicating if the timelock is reversible",
          "source": "Source of tokens"
        }
      },
      "transferAndLockMultiple(address,address[],uint256[],uint256[],bool[])": {
        "details": "source is expected to be a single address, i.e., the DAO",
        "params": {
          "amounts": "Array of amounts of tokens",
          "owners": "Array of owners of tokens",
          "releaseTimes": "Array of release times",
          "reversibles": "Array of flags indicating if the timelocks are reversible",
          "source": "Source of tokens"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateApi3Pool(address)": {
        "params": {
          "api3PoolAddress": "Address of the API3 pool contract"
        }
      },
      "withdraw(uint256,address)": {
        "params": {
          "destination": "Address that will receive the tokens",
          "indTimelock": "Index of the timelock to be withdrawn from"
        }
      },
      "withdrawToPool(uint256,address,address)": {
        "details": "We ask the user to provide api3PoolAddress as a form of verification, i.e., the user confirms that the API3 pool address set at this contract is correct",
        "params": {
          "api3PoolAddress": "Address of the API3 pool contract",
          "beneficiary": "Address that the tokens will be deposited to the pool contract on behalf of",
          "indTimelock": "Index of the timelock to be withdrawn from"
        }
      }
    },
    "title": "Contract that timelocks API3 tokens sent to it until the vesting period is over or the staking pool is operational",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getTimelock(uint256)": {
        "notice": "Returns the details of a timelock"
      },
      "getTimelocks()": {
        "notice": "Returns the details of all timelocks"
      },
      "reverseTimelock(uint256,address)": {
        "notice": "Cancels the timelock and sends the locked tokens to destination"
      },
      "reverseTimelockMultiple(uint256[],address)": {
        "notice": "Convenience function that calls reverseTimelock() multiple times"
      },
      "transferAndLock(address,address,uint256,uint256,bool)": {
        "notice": "Transfers amount number of API3 tokens to this contract to be received by their owner after releaseTime"
      },
      "transferAndLockMultiple(address,address[],uint256[],uint256[],bool[])": {
        "notice": "Convenience function that calls transferAndLock() multiple times"
      },
      "updateApi3Pool(address)": {
        "notice": "Allows the owner (i.e., API3 DAO) to set the address of api3Pool, which token owners can transfer their tokens to"
      },
      "withdraw(uint256,address)": {
        "notice": "Used by the owner to withdraw tokens kept by a specific timelock"
      },
      "withdrawToPool(uint256,address,address)": {
        "notice": "Used by the owner to withdraw their tokens kept by a specific timelock to the API3 pool"
      }
    },
    "notice": "The owner of TimelockManager (i.e., API3 DAO) can send tokens to TimelockManager to be timelocked until releaseTime. After releaseTime, the respective owner can withdraw the tokens. Alternatively, if the owner of this contract sets api3Pool, the token owners can transfer their tokens from TimelockManager to api3Pool before releaseTime. These tokens will be not be withdrawable from api3Pool until their respective releaseTimes. API3 DAO can also reverse timelocks (i.e., annul them) and send the tokens to a destination of its choice. Note that timelocks can be specified not to be reversible.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 563,
        "contract": "contracts/TimelockManager.sol:TimelockManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 966,
        "contract": "contracts/TimelockManager.sol:TimelockManager",
        "label": "api3Pool",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IApi3Pool)5"
      },
      {
        "astId": 970,
        "contract": "contracts/TimelockManager.sol:TimelockManager",
        "label": "timelocks",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Timelock)962_storage)"
      },
      {
        "astId": 973,
        "contract": "contracts/TimelockManager.sol:TimelockManager",
        "label": "noTimelocks",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IApi3Pool)5": {
        "encoding": "inplace",
        "label": "contract IApi3Pool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(Timelock)962_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TimelockManager.Timelock)",
        "numberOfBytes": "32",
        "value": "t_struct(Timelock)962_storage"
      },
      "t_struct(Timelock)962_storage": {
        "encoding": "inplace",
        "label": "struct TimelockManager.Timelock",
        "members": [
          {
            "astId": 955,
            "contract": "contracts/TimelockManager.sol:TimelockManager",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 957,
            "contract": "contracts/TimelockManager.sol:TimelockManager",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 959,
            "contract": "contracts/TimelockManager.sol:TimelockManager",
            "label": "releaseTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 961,
            "contract": "contracts/TimelockManager.sol:TimelockManager",
            "label": "reversible",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  },
  "gasEstimates": {
    "creation": {
      "codeDepositCost": "2219400",
      "executionCost": "infinite",
      "totalCost": "infinite"
    },
    "external": {
      "api3Pool()": "1070",
      "api3Token()": "infinite",
      "getTimelock(uint256)": "4716",
      "getTimelocks()": "infinite",
      "noTimelocks()": "1049",
      "owner()": "1122",
      "renounceOwnership()": "24336",
      "reverseTimelock(uint256,address)": "infinite",
      "reverseTimelockMultiple(uint256[],address)": "infinite",
      "timelocks(uint256)": "3803",
      "transferAndLock(address,address,uint256,uint256,bool)": "infinite",
      "transferAndLockMultiple(address,address[],uint256[],uint256[],bool[])": "infinite",
      "transferOwnership(address)": "infinite",
      "updateApi3Pool(address)": "23121",
      "withdraw(uint256,address)": "infinite",
      "withdrawToPool(uint256,address,address)": "infinite"
    }
  }
}