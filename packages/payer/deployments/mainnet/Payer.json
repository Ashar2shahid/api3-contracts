{
  "address": "0xA0D48b8fa999ca8d6967E8b6b6a4dbe0F82996b0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getDestinationsAndAmounts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_destinations",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequiredDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requiredDeposit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isReadyToPay",
      "outputs": [
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "makePayments",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentsSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_destinations",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "setPayments",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x71877335677229220ab72248c0776ea0ac83c13b90d00e59277e039f1af9e867",
  "receipt": {
    "to": null,
    "from": "0x1Da10cDEc44538E1854791b8e71FA4Ef05b4b238",
    "contractAddress": "0xA0D48b8fa999ca8d6967E8b6b6a4dbe0F82996b0",
    "transactionIndex": 189,
    "gasUsed": "786683",
    "logsBloom": "0x
    "blockHash": "0x39f46cd327348b64bf78723dba0167966b93773de63001f078bb7dc096cc449d",
    "transactionHash": "0x71877335677229220ab72248c0776ea0ac83c13b90d00e59277e039f1af9e867",
    "logs": [
      {
        "transactionIndex": 189,
        "blockNumber": 11470267,
        "transactionHash": "0x71877335677229220ab72248c0776ea0ac83c13b90d00e59277e039f1af9e867",
        "address": "0xA0D48b8fa999ca8d6967E8b6b6a4dbe0F82996b0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001da10cdec44538e1854791b8e71fa4ef05b4b238"
        ],
        "data": "0x",
        "logIndex": 218,
        "blockHash": "0x39f46cd327348b64bf78723dba0167966b93773de63001f078bb7dc096cc449d"
      },
      {
        "transactionIndex": 189,
        "blockNumber": 11470267,
        "transactionHash": "0x71877335677229220ab72248c0776ea0ac83c13b90d00e59277e039f1af9e867",
        "address": "0xA0D48b8fa999ca8d6967E8b6b6a4dbe0F82996b0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000001da10cdec44538e1854791b8e71fa4ef05b4b238",
          "0x0000000000000000000000005846711b4b7485392c1f0feaec203aa889071717"
        ],
        "data": "0x",
        "logIndex": 219,
        "blockHash": "0x39f46cd327348b64bf78723dba0167966b93773de63001f078bb7dc096cc449d"
      }
    ],
    "blockNumber": 11470267,
    "cumulativeGasUsed": "9829450",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5846711b4b7485392c1f0feaec203aa889071717",
    "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
  ],
  "solcInputHash": "080cc634b00638e9beb8abf5d478b935",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getDestinationsAndAmounts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_destinations\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequiredDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requiredDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isReadyToPay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makePayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentsSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_destinations\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"setPayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"owner\":\"Contract owner\",\"tokenAddress\":\"Address of the token that the payments will be made in\"}},\"getRequiredDeposit()\":{\"returns\":{\"requiredDeposit\":\"Required deposit to make the payments\"}},\"getTokenAddress()\":{\"returns\":{\"tokenAddress\":\"Token address\"}},\"isReadyToPay()\":{\"returns\":{\"state\":\"If the contract is ready to pay\"}},\"makePayments()\":{\"details\":\"The call will revert if the contract does not have adequate funds\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setPayments(address[],uint256[])\":{\"details\":\"Since the payment parameters are designed to be immutable, if incorrect parameters are used, the contract will go out of order and will have to be redeployed. If tokens are sent to the contract despite incorrect parameters have been used, the tokens may get stuck. This method is put behind onlyOwner to prevent griefers from calling it with incorrect parameters.\",\"params\":{\"_amounts\":\"Amounts that will be paid\",\"_destinations\":\"Addresses that the payments will be made to\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Payer contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getRequiredDeposit()\":{\"notice\":\"Returns the required deposit to make the payments\"},\"getTokenAddress()\":{\"notice\":\"Returns the address of the token that the payments are made in\"},\"isReadyToPay()\":{\"notice\":\"Called to check if makePayments() is ready to be called\"},\"makePayments()\":{\"notice\":\"Called to have the contract make payments\"},\"setPayments(address[],uint256[])\":{\"notice\":\"Called by the contract owner to set the parameters of the next payment\"}},\"notice\":\"This contract is used to make multiple ERC20 payments by the DAO with a single proposal. The owner of this contract sets which addresses will be paid and how much, and the DAO simply transfer()s tokens to this contract. Then, anyone can trigger this contract to send the tokens to their destinations. This is to avoid having to make a separate approve() proposal by the DAO.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Payer.sol\":\"Payer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0xf7c39c7e6d06ed3bda90cfefbcbf2ddc32c599c3d6721746546ad64946efccaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"contracts/Payer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Payer contract\\n/// @notice This contract is used to make multiple ERC20 payments by the DAO\\n/// with a single proposal. The owner of this contract sets which addresses\\n/// will be paid and how much, and the DAO simply transfer()s tokens to this\\n/// contract. Then, anyone can trigger this contract to send the tokens to\\n/// their destinations. This is to avoid having to make a separate approve()\\n/// proposal by the DAO.\\ncontract Payer is Ownable {\\n    using SafeMath for uint256;\\n\\n    IERC20 token;\\n    address[] private destinations;\\n    uint256[] private amounts;\\n    bool public paymentsSet = false;\\n\\n    /// @param owner Contract owner\\n    /// @param tokenAddress Address of the token that the payments will be made\\n    /// in\\n    constructor(\\n        address owner,\\n        address tokenAddress\\n        )\\n        public\\n    {\\n        transferOwnership(owner);\\n        token = IERC20(tokenAddress);\\n    }\\n\\n    /// @notice Called by the contract owner to set the parameters of the next\\n    /// payment\\n    /// @dev Since the payment parameters are designed to be immutable, if\\n    /// incorrect parameters are used, the contract will go out of order and\\n    /// will have to be redeployed. If tokens are sent to the contract despite\\n    /// incorrect parameters have been used, the tokens may get stuck.\\n    /// This method is put behind onlyOwner to prevent griefers from calling it\\n    /// with incorrect parameters.\\n    /// @param _destinations Addresses that the payments will be made to\\n    /// @param _amounts Amounts that will be paid\\n    function setPayments(\\n        address[] calldata _destinations,\\n        uint256[] calldata _amounts\\n        )\\n        external\\n        onlyOwner\\n    {\\n        require(!paymentsSet, \\\"Payment already set\\\");\\n        require(_amounts.length == _destinations.length, \\\"Parameters not of equal length\\\");\\n        require(_amounts.length != 0, \\\"Parameters empty\\\");\\n        require(_amounts.length <= 30, \\\"Parameters longer than 30\\\");\\n        paymentsSet = true;\\n        amounts = _amounts;\\n        destinations = _destinations;\\n    }\\n\\n    /// @notice Called to have the contract make payments\\n    /// @dev The call will revert if the contract does not have adequate funds\\n    function makePayments()\\n        external\\n    {\\n        require(paymentsSet, \\\"Payments not set\\\");\\n        paymentsSet = false;\\n        for (uint256 ind = 0; ind < amounts.length; ind++)\\n        {\\n            require(token.transfer(destinations[ind], amounts[ind]), \\\"Transfer failed\\\");\\n        }\\n        delete destinations;\\n        delete amounts;\\n    }\\n\\n    /// @notice Returns the required deposit to make the payments\\n    /// @return requiredDeposit Required deposit to make the payments\\n    function getRequiredDeposit()\\n        public\\n        view\\n        returns (uint256 requiredDeposit)\\n    {\\n        for (uint256 ind = 0; ind < amounts.length; ind++)\\n        {\\n            requiredDeposit = requiredDeposit.add(amounts[ind]);\\n        }\\n        uint256 currentBalance = token.balanceOf(address(this));\\n        if (currentBalance >= requiredDeposit)\\n        {\\n            requiredDeposit = 0;   \\n        }\\n        else\\n        {\\n            requiredDeposit = requiredDeposit.sub(currentBalance);\\n        }\\n    }\\n\\n    /// @notice Called to check if makePayments() is ready to be called\\n    /// @return state If the contract is ready to pay\\n    function isReadyToPay()\\n        external\\n        view\\n        returns (bool state)\\n    {\\n        state = paymentsSet && getRequiredDeposit() == 0;\\n    }\\n\\n    /// @notice Returns the address of the token that the payments are made in\\n    /// @return tokenAddress Token address\\n    function getTokenAddress()\\n        external\\n        view\\n        returns (address tokenAddress)\\n    {\\n        tokenAddress = address(token);\\n    }\\n\\n    function getDestinationsAndAmounts()\\n        external\\n        view\\n        returns (\\n            address[] memory _destinations,\\n            uint256[] memory _amounts\\n            )\\n    {\\n        _destinations = destinations;\\n        _amounts = amounts;\\n    }\\n}\\n\",\"keccak256\":\"0xb78e7c78d240397c0c3d602875a2eb0a4aaeba170c5b7f7d345574d579700ef6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526004805460ff1916905534801561001a57600080fd5b50604051610e3f380380610e3f8339818101604052604081101561003d57600080fd5b50805160209091015160006100506100b7565b600080546001600160a01b0319166001600160a01b038316908117825560405192935091600080516020610e1f833981519152908290a350610091826100bb565b600180546001600160a01b0319166001600160a01b0392909216919091179055506101b3565b3390565b6100c36100b7565b6000546001600160a01b03908116911614610125576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661016a5760405162461bcd60e51b8152600401808060200182810382526026815260200180610df96026913960400191505060405180910390fd5b600080546040516001600160a01b0380851693921691600080516020610e1f83398151915291a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b610c37806101c26000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638da5cb5b116100665780638da5cb5b146101a8578063bff57555146101b0578063c27abace146101b8578063e9eeefc51461027a578063f2fde38b146102825761009e565b806310fe9ae8146100a35780634869929a146100c757806358e56db4146100e3578063715018a6146100fd57806372f0f27214610107575b600080fd5b6100ab6102a8565b604080516001600160a01b039092168252519081900360200190f35b6100cf6102b7565b604080519115158252519081900360200190f35b6100eb6102c0565b60408051918252519081900360200190f35b61010561039d565b005b61010f610451565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561015357818101518382015260200161013b565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561019257818101518382015260200161017a565b5050505090500194505050505060405180910390f35b6100ab610508565b610105610517565b610105600480360360408110156101ce57600080fd5b8101906020810181356401000000008111156101e957600080fd5b8201836020820111156101fb57600080fd5b8035906020019184602083028401116401000000008311171561021d57600080fd5b91939092909160208101903564010000000081111561023b57600080fd5b82018360208201111561024d57600080fd5b8035906020019184602083028401116401000000008311171561026f57600080fd5b5090925090506106a5565b6100cf610879565b6101056004803603602081101561029857600080fd5b50356001600160a01b0316610898565b6001546001600160a01b031690565b60045460ff1681565b6000805b600354811015610302576102f8600382815481106102de57fe5b9060005260206000200154836109a290919063ffffffff16565b91506001016102c4565b50600154604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561034e57600080fd5b505afa158015610362573d6000803e3d6000fd5b505050506040513d602081101561037857600080fd5b5051905081811061038c5760009150610399565b6103968282610a03565b91505b5090565b6103a5610a45565b6000546001600160a01b03908116911614610407576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60608060028054806020026020016040519081016040528092919081815260200182805480156104aa57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161048c575b5050505050915060038054806020026020016040519081016040528092919081815260200182805480156104fd57602002820191906000526020600020905b8154815260200190600101908083116104e9575b505050505090509091565b6000546001600160a01b031690565b60045460ff16610561576040805162461bcd60e51b815260206004820152601060248201526f14185e5b595b9d1cc81b9bdd081cd95d60821b604482015290519081900360640190fd5b6004805460ff1916905560005b60035481101561068a57600154600280546001600160a01b039092169163a9059cbb91908490811061059c57fe5b600091825260209091200154600380546001600160a01b0390921691859081106105c257fe5b90600052602060002001546040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561061357600080fd5b505af1158015610627573d6000803e3d6000fd5b505050506040513d602081101561063d57600080fd5b5051610682576040805162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b604482015290519081900360640190fd5b60010161056e565b5061069760026000610ae0565b6106a360036000610ae0565b565b6106ad610a45565b6000546001600160a01b0390811691161461070f576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60045460ff161561075d576040805162461bcd60e51b815260206004820152601360248201527214185e5b595b9d08185b1c9958591e481cd95d606a1b604482015290519081900360640190fd5b8083146107b1576040805162461bcd60e51b815260206004820152601e60248201527f506172616d6574657273206e6f74206f6620657175616c206c656e6774680000604482015290519081900360640190fd5b806107f6576040805162461bcd60e51b815260206004820152601060248201526f506172616d657465727320656d70747960801b604482015290519081900360640190fd5b601e81111561084c576040805162461bcd60e51b815260206004820152601960248201527f506172616d6574657273206c6f6e676572207468616e20333000000000000000604482015290519081900360640190fd5b6004805460ff1916600117905561086560038383610b01565b5061087260028585610b48565b5050505050565b60045460009060ff16801561089357506108916102c0565b155b905090565b6108a0610a45565b6000546001600160a01b03908116911614610902576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166109475760405162461bcd60e51b8152600401808060200182810382526026815260200180610bdc6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000828201838110156109fc576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b60006109fc83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610a49565b3390565b60008184841115610ad85760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610a9d578181015183820152602001610a85565b50505050905090810190601f168015610aca5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b5080546000825590600052602060002090810190610afe9190610ba7565b50565b828054828255906000526020600020908101928215610b3c579160200282015b82811115610b3c578235825591602001919060010190610b21565b50610399929150610ba7565b828054828255906000526020600020908101928215610b9b579160200282015b82811115610b9b5781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190610b68565b50610399929150610bbc565b5b808211156103995760008155600101610ba8565b5b808211156103995780546001600160a01b0319168155600101610bbd56fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a2646970667358221220acd9453674bd818f9a7c437d114588c90c9f88fe11ff6c7aac96a0072a9de09464736f6c634300060c00334f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573738be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80638da5cb5b116100665780638da5cb5b146101a8578063bff57555146101b0578063c27abace146101b8578063e9eeefc51461027a578063f2fde38b146102825761009e565b806310fe9ae8146100a35780634869929a146100c757806358e56db4146100e3578063715018a6146100fd57806372f0f27214610107575b600080fd5b6100ab6102a8565b604080516001600160a01b039092168252519081900360200190f35b6100cf6102b7565b604080519115158252519081900360200190f35b6100eb6102c0565b60408051918252519081900360200190f35b61010561039d565b005b61010f610451565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561015357818101518382015260200161013b565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561019257818101518382015260200161017a565b5050505090500194505050505060405180910390f35b6100ab610508565b610105610517565b610105600480360360408110156101ce57600080fd5b8101906020810181356401000000008111156101e957600080fd5b8201836020820111156101fb57600080fd5b8035906020019184602083028401116401000000008311171561021d57600080fd5b91939092909160208101903564010000000081111561023b57600080fd5b82018360208201111561024d57600080fd5b8035906020019184602083028401116401000000008311171561026f57600080fd5b5090925090506106a5565b6100cf610879565b6101056004803603602081101561029857600080fd5b50356001600160a01b0316610898565b6001546001600160a01b031690565b60045460ff1681565b6000805b600354811015610302576102f8600382815481106102de57fe5b9060005260206000200154836109a290919063ffffffff16565b91506001016102c4565b50600154604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561034e57600080fd5b505afa158015610362573d6000803e3d6000fd5b505050506040513d602081101561037857600080fd5b5051905081811061038c5760009150610399565b6103968282610a03565b91505b5090565b6103a5610a45565b6000546001600160a01b03908116911614610407576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60608060028054806020026020016040519081016040528092919081815260200182805480156104aa57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161048c575b5050505050915060038054806020026020016040519081016040528092919081815260200182805480156104fd57602002820191906000526020600020905b8154815260200190600101908083116104e9575b505050505090509091565b6000546001600160a01b031690565b60045460ff16610561576040805162461bcd60e51b815260206004820152601060248201526f14185e5b595b9d1cc81b9bdd081cd95d60821b604482015290519081900360640190fd5b6004805460ff1916905560005b60035481101561068a57600154600280546001600160a01b039092169163a9059cbb91908490811061059c57fe5b600091825260209091200154600380546001600160a01b0390921691859081106105c257fe5b90600052602060002001546040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561061357600080fd5b505af1158015610627573d6000803e3d6000fd5b505050506040513d602081101561063d57600080fd5b5051610682576040805162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b604482015290519081900360640190fd5b60010161056e565b5061069760026000610ae0565b6106a360036000610ae0565b565b6106ad610a45565b6000546001600160a01b0390811691161461070f576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60045460ff161561075d576040805162461bcd60e51b815260206004820152601360248201527214185e5b595b9d08185b1c9958591e481cd95d606a1b604482015290519081900360640190fd5b8083146107b1576040805162461bcd60e51b815260206004820152601e60248201527f506172616d6574657273206e6f74206f6620657175616c206c656e6774680000604482015290519081900360640190fd5b806107f6576040805162461bcd60e51b815260206004820152601060248201526f506172616d657465727320656d70747960801b604482015290519081900360640190fd5b601e81111561084c576040805162461bcd60e51b815260206004820152601960248201527f506172616d6574657273206c6f6e676572207468616e20333000000000000000604482015290519081900360640190fd5b6004805460ff1916600117905561086560038383610b01565b5061087260028585610b48565b5050505050565b60045460009060ff16801561089357506108916102c0565b155b905090565b6108a0610a45565b6000546001600160a01b03908116911614610902576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166109475760405162461bcd60e51b8152600401808060200182810382526026815260200180610bdc6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000828201838110156109fc576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b60006109fc83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610a49565b3390565b60008184841115610ad85760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610a9d578181015183820152602001610a85565b50505050905090810190601f168015610aca5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b5080546000825590600052602060002090810190610afe9190610ba7565b50565b828054828255906000526020600020908101928215610b3c579160200282015b82811115610b3c578235825591602001919060010190610b21565b50610399929150610ba7565b828054828255906000526020600020908101928215610b9b579160200282015b82811115610b9b5781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190610b68565b50610399929150610bbc565b5b808211156103995760008155600101610ba8565b5b808211156103995780546001600160a01b0319168155600101610bbd56fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a2646970667358221220acd9453674bd818f9a7c437d114588c90c9f88fe11ff6c7aac96a0072a9de09464736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "owner": "Contract owner",
          "tokenAddress": "Address of the token that the payments will be made in"
        }
      },
      "getRequiredDeposit()": {
        "returns": {
          "requiredDeposit": "Required deposit to make the payments"
        }
      },
      "getTokenAddress()": {
        "returns": {
          "tokenAddress": "Token address"
        }
      },
      "isReadyToPay()": {
        "returns": {
          "state": "If the contract is ready to pay"
        }
      },
      "makePayments()": {
        "details": "The call will revert if the contract does not have adequate funds"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setPayments(address[],uint256[])": {
        "details": "Since the payment parameters are designed to be immutable, if incorrect parameters are used, the contract will go out of order and will have to be redeployed. If tokens are sent to the contract despite incorrect parameters have been used, the tokens may get stuck. This method is put behind onlyOwner to prevent griefers from calling it with incorrect parameters.",
        "params": {
          "_amounts": "Amounts that will be paid",
          "_destinations": "Addresses that the payments will be made to"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Payer contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getRequiredDeposit()": {
        "notice": "Returns the required deposit to make the payments"
      },
      "getTokenAddress()": {
        "notice": "Returns the address of the token that the payments are made in"
      },
      "isReadyToPay()": {
        "notice": "Called to check if makePayments() is ready to be called"
      },
      "makePayments()": {
        "notice": "Called to have the contract make payments"
      },
      "setPayments(address[],uint256[])": {
        "notice": "Called by the contract owner to set the parameters of the next payment"
      }
    },
    "notice": "This contract is used to make multiple ERC20 payments by the DAO with a single proposal. The owner of this contract sets which addresses will be paid and how much, and the DAO simply transfer()s tokens to this contract. Then, anyone can trigger this contract to send the tokens to their destinations. This is to avoid having to make a separate approve() proposal by the DAO.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 30,
        "contract": "contracts/Payer.sol:Payer",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 941,
        "contract": "contracts/Payer.sol:Payer",
        "label": "token",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)908"
      },
      {
        "astId": 944,
        "contract": "contracts/Payer.sol:Payer",
        "label": "destinations",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 947,
        "contract": "contracts/Payer.sol:Payer",
        "label": "amounts",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 950,
        "contract": "contracts/Payer.sol:Payer",
        "label": "paymentsSet",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)908": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}